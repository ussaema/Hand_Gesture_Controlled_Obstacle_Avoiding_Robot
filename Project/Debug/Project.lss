
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000025f8  0000268c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800164  00800164  000026f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f8  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000107fa  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033d9  00000000  00000000  00013752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003cec  00000000  00000000  00016b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001dcc  00000000  00000000  0001a818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b9a  00000000  00000000  0001c5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009726  00000000  00000000  0001f17e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000770  00000000  00000000  000288a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_11>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_16>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_18>
      4c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_19>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	11 12       	cpse	r1, r17
      6a:	13 14       	cp	r1, r3
      6c:	15 16       	cp	r1, r21

0000006e <_ZL10child_pipe>:
      6e:	0a 0b 0c 0d 0e 0f                                   ......

00000074 <_ZL17child_pipe_enable>:
      74:	00 01 02 03 04 05                                   ......

0000007a <__ctors_start>:
      7a:	81 00       	.word	0x0081	; ????
      7c:	89 00       	.word	0x0089	; ????
      7e:	2c 04       	cpc	r2, r12
      80:	34 04       	cpc	r3, r4
      82:	3c 04       	cpc	r3, r12
      84:	c6 04       	cpc	r12, r6
      86:	5b 06       	cpc	r5, r27
      88:	e7 09       	sbc	r30, r7
      8a:	ef 09       	sbc	r30, r15
      8c:	d4 0a       	sbc	r13, r20
      8e:	2c 0b       	sbc	r18, r28
      90:	90 0c       	add	r9, r0
      92:	4c 0f       	add	r20, r28

00000094 <__ctors_end>:
      94:	85 00       	.word	0x0085	; ????
      96:	91 00       	.word	0x0091	; ????
      98:	30 04       	cpc	r3, r0
      9a:	38 04       	cpc	r3, r8
      9c:	44 04       	cpc	r4, r4
      9e:	ce 04       	cpc	r12, r14
      a0:	5f 06       	cpc	r5, r31
      a2:	eb 09       	sbc	r30, r11
      a4:	f3 09       	sbc	r31, r3
      a6:	e2 0a       	sbc	r14, r18
      a8:	30 0b       	sbc	r19, r16
      aa:	94 0c       	add	r9, r4
      ac:	59 0f       	add	r21, r25

000000ae <__dtors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d8 e0       	ldi	r29, 0x08	; 8
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	e8 ef       	ldi	r30, 0xF8	; 248
      c2:	f5 e2       	ldi	r31, 0x25	; 37
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a4 36       	cpi	r26, 0x64	; 100
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	a4 e6       	ldi	r26, 0x64	; 100
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	ad 3e       	cpi	r26, 0xED	; 237
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
      e0:	10 e0       	ldi	r17, 0x00	; 0
      e2:	ca e4       	ldi	r28, 0x4A	; 74
      e4:	d0 e0       	ldi	r29, 0x00	; 0
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
      e8:	21 97       	sbiw	r28, 0x01	; 1
      ea:	fe 01       	movw	r30, r28
      ec:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__tablejump2__>
      f0:	cd 33       	cpi	r28, 0x3D	; 61
      f2:	d1 07       	cpc	r29, r17
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
      f6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <main>
      fa:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <_GLOBAL__sub_I_i2c_init>:
	protected:
	private:
	
}; //MCU

static MCU mcu;
     102:	84 e6       	ldi	r24, 0x64	; 100
     104:	91 e0       	ldi	r25, 0x01	; 1
     106:	0c 94 99 00 	jmp	0x132	; 0x132 <_ZN3MCUC1Ev>

0000010a <_GLOBAL__sub_D_i2c_init>:
     10a:	84 e6       	ldi	r24, 0x64	; 100
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00000112 <_GLOBAL__sub_I__ZN3IMUC2Ehh>:
     112:	8b e6       	ldi	r24, 0x6B	; 107
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 99 00 	call	0x132	; 0x132 <_ZN3MCUC1Ev>
	int intToStr(int x, char str[], int d);
	void ftoa(float n, char *res, int decimals);
	void itoa(int32_t n, char *res);
}; //UART

static UART uart;
     11a:	86 e6       	ldi	r24, 0x66	; 102
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	0c 94 01 03 	jmp	0x602	; 0x602 <_ZN4UARTC1Ev>

00000122 <_GLOBAL__sub_D__ZN3IMUC2Ehh>:
     122:	86 e6       	ldi	r24, 0x66	; 102
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 02 03 	call	0x604	; 0x604 <_ZN4UARTD1Ev>
     12a:	8b e6       	ldi	r24, 0x6B	; 107
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00000132 <_ZN3MCUC1Ev>:
{
	uint8_t bit = getPinMask(pin);
	uint8_t port = getPinPort(pin); if (port == NO_PIN) return LOW;
	uint8_t timer = getPinTimer(pin); if (timer != NO_TIMER) setTimerOff(timer); // be sure that timer associated to this pin is off
	return (*getPinInput(port) & bit) ? HIGH : LOW ;
}
     132:	08 95       	ret

00000134 <_ZN3MCUD1Ev>:
     134:	08 95       	ret

00000136 <_ZN3MCU4initEv>:
     136:	78 94       	sei
     138:	14 bc       	out	0x24, r1	; 36
     13a:	15 bc       	out	0x25, r1	; 37
     13c:	84 b5       	in	r24, 0x24	; 36
     13e:	82 60       	ori	r24, 0x02	; 2
     140:	84 bd       	out	0x24, r24	; 36
     142:	84 b5       	in	r24, 0x24	; 36
     144:	81 60       	ori	r24, 0x01	; 1
     146:	84 bd       	out	0x24, r24	; 36
     148:	85 b5       	in	r24, 0x25	; 37
     14a:	82 60       	ori	r24, 0x02	; 2
     14c:	85 bd       	out	0x25, r24	; 37
     14e:	85 b5       	in	r24, 0x25	; 37
     150:	81 60       	ori	r24, 0x01	; 1
     152:	85 bd       	out	0x25, r24	; 37
     154:	ee e6       	ldi	r30, 0x6E	; 110
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	81 60       	ori	r24, 0x01	; 1
     15c:	80 83       	st	Z, r24
     15e:	a0 e8       	ldi	r26, 0x80	; 128
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	1c 92       	st	X, r1
     164:	e1 e8       	ldi	r30, 0x81	; 129
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	10 82       	st	Z, r1
     16a:	80 81       	ld	r24, Z
     16c:	82 60       	ori	r24, 0x02	; 2
     16e:	80 83       	st	Z, r24
     170:	80 81       	ld	r24, Z
     172:	81 60       	ori	r24, 0x01	; 1
     174:	80 83       	st	Z, r24
     176:	8c 91       	ld	r24, X
     178:	81 60       	ori	r24, 0x01	; 1
     17a:	8c 93       	st	X, r24
     17c:	e0 eb       	ldi	r30, 0xB0	; 176
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	10 82       	st	Z, r1
     182:	a1 eb       	ldi	r26, 0xB1	; 177
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	1c 92       	st	X, r1
     188:	8c 91       	ld	r24, X
     18a:	84 60       	ori	r24, 0x04	; 4
     18c:	8c 93       	st	X, r24
     18e:	80 81       	ld	r24, Z
     190:	81 60       	ori	r24, 0x01	; 1
     192:	80 83       	st	Z, r24
     194:	ea e7       	ldi	r30, 0x7A	; 122
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	81 60       	ori	r24, 0x01	; 1
     19c:	80 83       	st	Z, r24
     19e:	80 81       	ld	r24, Z
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	80 83       	st	Z, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	84 60       	ori	r24, 0x04	; 4
     1a8:	80 83       	st	Z, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	80 68       	ori	r24, 0x80	; 128
     1ae:	80 83       	st	Z, r24
     1b0:	08 95       	ret

000001b2 <_ZN3MCU14getPinFunctionEh>:
     1b2:	66 23       	and	r22, r22
     1b4:	39 f0       	breq	.+14     	; 0x1c4 <_ZN3MCU14getPinFunctionEh+0x12>
     1b6:	61 30       	cpi	r22, 0x01	; 1
     1b8:	41 f0       	breq	.+16     	; 0x1ca <_ZN3MCU14getPinFunctionEh+0x18>
     1ba:	62 30       	cpi	r22, 0x02	; 2
     1bc:	49 f0       	breq	.+18     	; 0x1d0 <_ZN3MCU14getPinFunctionEh+0x1e>
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	08 95       	ret
     1c4:	8a e2       	ldi	r24, 0x2A	; 42
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	08 95       	ret
     1ca:	84 e2       	ldi	r24, 0x24	; 36
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	08 95       	ret
     1d0:	87 e2       	ldi	r24, 0x27	; 39
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	08 95       	ret

000001d6 <_ZN3MCU12getPinOutputEh>:
     1d6:	66 23       	and	r22, r22
     1d8:	39 f0       	breq	.+14     	; 0x1e8 <_ZN3MCU12getPinOutputEh+0x12>
     1da:	61 30       	cpi	r22, 0x01	; 1
     1dc:	41 f0       	breq	.+16     	; 0x1ee <_ZN3MCU12getPinOutputEh+0x18>
     1de:	62 30       	cpi	r22, 0x02	; 2
     1e0:	49 f0       	breq	.+18     	; 0x1f4 <_ZN3MCU12getPinOutputEh+0x1e>
     1e2:	8f ef       	ldi	r24, 0xFF	; 255
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	08 95       	ret
     1e8:	8b e2       	ldi	r24, 0x2B	; 43
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	08 95       	ret
     1ee:	85 e2       	ldi	r24, 0x25	; 37
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	08 95       	ret
     1f4:	88 e2       	ldi	r24, 0x28	; 40
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	08 95       	ret

000001fa <_ZN3MCU11getPinInputEh>:
     1fa:	66 23       	and	r22, r22
     1fc:	39 f0       	breq	.+14     	; 0x20c <_ZN3MCU11getPinInputEh+0x12>
     1fe:	61 30       	cpi	r22, 0x01	; 1
     200:	41 f0       	breq	.+16     	; 0x212 <_ZN3MCU11getPinInputEh+0x18>
     202:	62 30       	cpi	r22, 0x02	; 2
     204:	49 f0       	breq	.+18     	; 0x218 <_ZN3MCU11getPinInputEh+0x1e>
     206:	8f ef       	ldi	r24, 0xFF	; 255
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	08 95       	ret
     20c:	89 e2       	ldi	r24, 0x29	; 41
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	08 95       	ret
     212:	83 e2       	ldi	r24, 0x23	; 35
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	08 95       	ret
     218:	86 e2       	ldi	r24, 0x26	; 38
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	08 95       	ret

0000021e <_ZN3MCU10getPinPortEh>:
     21e:	68 30       	cpi	r22, 0x08	; 8
     220:	68 f0       	brcs	.+26     	; 0x23c <_ZN3MCU10getPinPortEh+0x1e>
     222:	88 ef       	ldi	r24, 0xF8	; 248
     224:	86 0f       	add	r24, r22
     226:	86 30       	cpi	r24, 0x06	; 6
     228:	28 f0       	brcs	.+10     	; 0x234 <_ZN3MCU10getPinPortEh+0x16>
     22a:	6e 50       	subi	r22, 0x0E	; 14
     22c:	66 30       	cpi	r22, 0x06	; 6
     22e:	20 f0       	brcs	.+8      	; 0x238 <_ZN3MCU10getPinPortEh+0x1a>
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	08 95       	ret
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	08 95       	ret
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	08 95       	ret
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	08 95       	ret

00000240 <_ZN3MCU10getPinMaskEh>:
     240:	68 30       	cpi	r22, 0x08	; 8
     242:	28 f0       	brcs	.+10     	; 0x24e <_ZN3MCU10getPinMaskEh+0xe>
     244:	88 ef       	ldi	r24, 0xF8	; 248
     246:	86 0f       	add	r24, r22
     248:	86 30       	cpi	r24, 0x06	; 6
     24a:	38 f4       	brcc	.+14     	; 0x25a <_ZN3MCU10getPinMaskEh+0x1a>
     24c:	68 2f       	mov	r22, r24
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	01 c0       	rjmp	.+2      	; 0x254 <_ZN3MCU10getPinMaskEh+0x14>
     252:	88 0f       	add	r24, r24
     254:	6a 95       	dec	r22
     256:	ea f7       	brpl	.-6      	; 0x252 <_ZN3MCU10getPinMaskEh+0x12>
     258:	08 95       	ret
     25a:	82 ef       	ldi	r24, 0xF2	; 242
     25c:	86 0f       	add	r24, r22
     25e:	86 30       	cpi	r24, 0x06	; 6
     260:	a8 f3       	brcs	.-22     	; 0x24c <_ZN3MCU10getPinMaskEh+0xc>
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	08 95       	ret

00000266 <_ZN3MCU11getPinTimerEh>:
     266:	63 30       	cpi	r22, 0x03	; 3
     268:	81 f0       	breq	.+32     	; 0x28a <_ZN3MCU11getPinTimerEh+0x24>
     26a:	65 30       	cpi	r22, 0x05	; 5
     26c:	81 f0       	breq	.+32     	; 0x28e <_ZN3MCU11getPinTimerEh+0x28>
     26e:	66 30       	cpi	r22, 0x06	; 6
     270:	81 f0       	breq	.+32     	; 0x292 <_ZN3MCU11getPinTimerEh+0x2c>
     272:	69 30       	cpi	r22, 0x09	; 9
     274:	81 f0       	breq	.+32     	; 0x296 <_ZN3MCU11getPinTimerEh+0x30>
     276:	6a 30       	cpi	r22, 0x0A	; 10
     278:	21 f0       	breq	.+8      	; 0x282 <_ZN3MCU11getPinTimerEh+0x1c>
     27a:	6b 30       	cpi	r22, 0x0B	; 11
     27c:	21 f0       	breq	.+8      	; 0x286 <_ZN3MCU11getPinTimerEh+0x20>
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	08 95       	ret
     282:	84 e0       	ldi	r24, 0x04	; 4
     284:	08 95       	ret
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	08 95       	ret
     28a:	86 e0       	ldi	r24, 0x06	; 6
     28c:	08 95       	ret
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	08 95       	ret
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	08 95       	ret
     296:	83 e0       	ldi	r24, 0x03	; 3
     298:	08 95       	ret

0000029a <_ZN3MCU14setPinFunctionEhh>:
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	7c 01       	movw	r14, r24
     2aa:	d6 2f       	mov	r29, r22
     2ac:	d4 2e       	mov	r13, r20
     2ae:	0e 94 20 01 	call	0x240	; 0x240 <_ZN3MCU10getPinMaskEh>
     2b2:	c8 2f       	mov	r28, r24
     2b4:	6d 2f       	mov	r22, r29
     2b6:	c7 01       	movw	r24, r14
     2b8:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN3MCU10getPinPortEh>
     2bc:	d8 2f       	mov	r29, r24
     2be:	8f 3f       	cpi	r24, 0xFF	; 255
     2c0:	f1 f0       	breq	.+60     	; 0x2fe <_ZN3MCU14setPinFunctionEhh+0x64>
     2c2:	68 2f       	mov	r22, r24
     2c4:	c7 01       	movw	r24, r14
     2c6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN3MCU14getPinFunctionEh>
     2ca:	8c 01       	movw	r16, r24
     2cc:	6d 2f       	mov	r22, r29
     2ce:	c7 01       	movw	r24, r14
     2d0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN3MCU12getPinOutputEh>
     2d4:	fc 01       	movw	r30, r24
     2d6:	2f b7       	in	r18, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	d1 10       	cpse	r13, r1
     2dc:	08 c0       	rjmp	.+16     	; 0x2ee <_ZN3MCU14setPinFunctionEhh+0x54>
     2de:	d8 01       	movw	r26, r16
     2e0:	9c 91       	ld	r25, X
     2e2:	c0 95       	com	r28
     2e4:	9c 23       	and	r25, r28
     2e6:	9c 93       	st	X, r25
     2e8:	80 81       	ld	r24, Z
     2ea:	c8 23       	and	r28, r24
     2ec:	06 c0       	rjmp	.+12     	; 0x2fa <_ZN3MCU14setPinFunctionEhh+0x60>
     2ee:	b1 e0       	ldi	r27, 0x01	; 1
     2f0:	db 12       	cpse	r13, r27
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <_ZN3MCU14setPinFunctionEhh+0x62>
     2f4:	f8 01       	movw	r30, r16
     2f6:	80 81       	ld	r24, Z
     2f8:	c8 2b       	or	r28, r24
     2fa:	c0 83       	st	Z, r28
     2fc:	2f bf       	out	0x3f, r18	; 63
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	08 95       	ret

0000030e <_ZN3MCU11setTimerOffEh>:
     30e:	63 30       	cpi	r22, 0x03	; 3
     310:	99 f0       	breq	.+38     	; 0x338 <_ZN3MCU11setTimerOffEh+0x2a>
     312:	28 f4       	brcc	.+10     	; 0x31e <_ZN3MCU11setTimerOffEh+0x10>
     314:	61 30       	cpi	r22, 0x01	; 1
     316:	49 f0       	breq	.+18     	; 0x32a <_ZN3MCU11setTimerOffEh+0x1c>
     318:	62 30       	cpi	r22, 0x02	; 2
     31a:	51 f0       	breq	.+20     	; 0x330 <_ZN3MCU11setTimerOffEh+0x22>
     31c:	08 95       	ret
     31e:	65 30       	cpi	r22, 0x05	; 5
     320:	a9 f0       	breq	.+42     	; 0x34c <_ZN3MCU11setTimerOffEh+0x3e>
     322:	70 f0       	brcs	.+28     	; 0x340 <_ZN3MCU11setTimerOffEh+0x32>
     324:	66 30       	cpi	r22, 0x06	; 6
     326:	b1 f0       	breq	.+44     	; 0x354 <_ZN3MCU11setTimerOffEh+0x46>
     328:	08 95       	ret
     32a:	84 b5       	in	r24, 0x24	; 36
     32c:	8f 77       	andi	r24, 0x7F	; 127
     32e:	02 c0       	rjmp	.+4      	; 0x334 <_ZN3MCU11setTimerOffEh+0x26>
     330:	84 b5       	in	r24, 0x24	; 36
     332:	8f 7d       	andi	r24, 0xDF	; 223
     334:	84 bd       	out	0x24, r24	; 36
     336:	08 95       	ret
     338:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     33c:	8f 77       	andi	r24, 0x7F	; 127
     33e:	03 c0       	rjmp	.+6      	; 0x346 <_ZN3MCU11setTimerOffEh+0x38>
     340:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     344:	8f 7d       	andi	r24, 0xDF	; 223
     346:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     34a:	08 95       	ret
     34c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     350:	8f 77       	andi	r24, 0x7F	; 127
     352:	03 c0       	rjmp	.+6      	; 0x35a <_ZN3MCU11setTimerOffEh+0x4c>
     354:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     358:	8f 7d       	andi	r24, 0xDF	; 223
     35a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     35e:	08 95       	ret

00000360 <_ZN3MCU11setPinLevelEhh>:
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ec 01       	movw	r28, r24
     36e:	06 2f       	mov	r16, r22
     370:	e4 2e       	mov	r14, r20
     372:	0e 94 20 01 	call	0x240	; 0x240 <_ZN3MCU10getPinMaskEh>
     376:	18 2f       	mov	r17, r24
     378:	60 2f       	mov	r22, r16
     37a:	ce 01       	movw	r24, r28
     37c:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN3MCU10getPinPortEh>
     380:	f8 2e       	mov	r15, r24
     382:	8f ef       	ldi	r24, 0xFF	; 255
     384:	f8 16       	cp	r15, r24
     386:	d1 f0       	breq	.+52     	; 0x3bc <_ZN3MCU11setPinLevelEhh+0x5c>
     388:	60 2f       	mov	r22, r16
     38a:	ce 01       	movw	r24, r28
     38c:	0e 94 33 01 	call	0x266	; 0x266 <_ZN3MCU11getPinTimerEh>
     390:	8f 3f       	cpi	r24, 0xFF	; 255
     392:	21 f0       	breq	.+8      	; 0x39c <_ZN3MCU11setPinLevelEhh+0x3c>
     394:	68 2f       	mov	r22, r24
     396:	ce 01       	movw	r24, r28
     398:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN3MCU11setTimerOffEh>
     39c:	6f 2d       	mov	r22, r15
     39e:	ce 01       	movw	r24, r28
     3a0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN3MCU12getPinOutputEh>
     3a4:	fc 01       	movw	r30, r24
     3a6:	9f b7       	in	r25, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	80 81       	ld	r24, Z
     3ac:	e1 10       	cpse	r14, r1
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <_ZN3MCU11setPinLevelEhh+0x56>
     3b0:	10 95       	com	r17
     3b2:	18 23       	and	r17, r24
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <_ZN3MCU11setPinLevelEhh+0x58>
     3b6:	18 2b       	or	r17, r24
     3b8:	10 83       	st	Z, r17
     3ba:	9f bf       	out	0x3f, r25	; 63
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	08 95       	ret

000003ca <_ZN3MCU9setPinPWMEhj>:
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	8c 01       	movw	r16, r24
     3d6:	f6 2e       	mov	r15, r22
     3d8:	ea 01       	movw	r28, r20
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
     3e0:	20 97       	sbiw	r28, 0x00	; 0
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <_ZN3MCU9setPinPWMEhj+0x1e>
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <_ZN3MCU9setPinPWMEhj+0x26>
     3e8:	cf 3f       	cpi	r28, 0xFF	; 255
     3ea:	d1 05       	cpc	r29, r1
     3ec:	51 f4       	brne	.+20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	6f 2d       	mov	r22, r15
     3f2:	c8 01       	movw	r24, r16
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	0c 94 b0 01 	jmp	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
     402:	6f 2d       	mov	r22, r15
     404:	c8 01       	movw	r24, r16
     406:	0e 94 33 01 	call	0x266	; 0x266 <_ZN3MCU11getPinTimerEh>
     40a:	83 30       	cpi	r24, 0x03	; 3
     40c:	e1 f0       	breq	.+56     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     40e:	48 f4       	brcc	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	a1 f0       	breq	.+40     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     414:	82 30       	cpi	r24, 0x02	; 2
     416:	99 f5       	brne	.+102    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     418:	84 b5       	in	r24, 0x24	; 36
     41a:	80 62       	ori	r24, 0x20	; 32
     41c:	84 bd       	out	0x24, r24	; 36
     41e:	c8 bd       	out	0x28, r28	; 40
     420:	33 c0       	rjmp	.+102    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     422:	85 30       	cpi	r24, 0x05	; 5
     424:	21 f1       	breq	.+72     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     426:	c8 f0       	brcs	.+50     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     428:	86 30       	cpi	r24, 0x06	; 6
     42a:	49 f5       	brne	.+82     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     42c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     430:	80 62       	ori	r24, 0x20	; 32
     432:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     436:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     43a:	26 c0       	rjmp	.+76     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     43c:	84 b5       	in	r24, 0x24	; 36
     43e:	80 68       	ori	r24, 0x80	; 128
     440:	84 bd       	out	0x24, r24	; 36
     442:	c7 bd       	out	0x27, r28	; 39
     444:	21 c0       	rjmp	.+66     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     446:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     44a:	80 68       	ori	r24, 0x80	; 128
     44c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     450:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     454:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     458:	17 c0       	rjmp	.+46     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     45a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     45e:	80 62       	ori	r24, 0x20	; 32
     460:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     464:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     468:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     46c:	0d c0       	rjmp	.+26     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     46e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     472:	80 68       	ori	r24, 0x80	; 128
     474:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     478:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     47c:	05 c0       	rjmp	.+10     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47e:	c0 38       	cpi	r28, 0x80	; 128
     480:	d1 05       	cpc	r29, r1
     482:	08 f0       	brcs	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     484:	b4 cf       	rjmp	.-152    	; 0x3ee <_ZN3MCU9setPinPWMEhj+0x24>
     486:	ae cf       	rjmp	.-164    	; 0x3e4 <_ZN3MCU9setPinPWMEhj+0x1a>
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	08 95       	ret

00000494 <_ZN3MCU9getPinADCEh>:

uint16_t MCU::getPinADC(uint8_t pin)
{
	uint8_t low, high;
	// get the reference pin to the associated port
	if (pin >= 14) pin -= 14;
     494:	6e 30       	cpi	r22, 0x0E	; 14
     496:	08 f0       	brcs	.+2      	; 0x49a <_ZN3MCU9getPinADCEh+0x6>
     498:	6e 50       	subi	r22, 0x0E	; 14
	// set the analog reference and ADLAR (to 0) and select the channel
	ADMUX = (1 << 6) | (pin & 0x07);
     49a:	67 70       	andi	r22, 0x07	; 7
     49c:	60 64       	ori	r22, 0x40	; 64
     49e:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// start conversion
	setBit(ADCSRA, ADSC);
     4a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     4a6:	80 64       	ori	r24, 0x40	; 64
     4a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	// wait until the conversion is done
	while (readBit(ADCSRA, ADSC));
     4ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     4b0:	86 fd       	sbrc	r24, 6
     4b2:	fc cf       	rjmp	.-8      	; 0x4ac <_ZN3MCU9getPinADCEh+0x18>
	// read the ADC values
	low  = ADCL;
     4b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
     4b8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// combine to 16 bit
	return (high << 8) | low;
     4bc:	90 e0       	ldi	r25, 0x00	; 0
}
     4be:	92 2b       	or	r25, r18
     4c0:	08 95       	ret

000004c2 <__vector_16>:
volatile unsigned long time_counter = 0;
volatile unsigned long time_ms = 0;
static unsigned char time_fraction = 0;

ISR(TIMER0_OVF_vect)
{
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
     4d0:	8f 93       	push	r24
     4d2:	9f 93       	push	r25
     4d4:	af 93       	push	r26
     4d6:	bf 93       	push	r27
	// read the registers from the memory
	unsigned long m = time_ms;
     4d8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <time_ms>
     4dc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <time_ms+0x1>
     4e0:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <time_ms+0x2>
     4e4:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <time_ms+0x3>
	unsigned char f = time_fraction;
     4e8:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <_ZL13time_fraction>
	// compute the time in ms and fraction
	m += (((64 * 256) / (F_CPU / 1000000L)) / 1000);
	f += ((((64 * 256) / ( F_CPU / 1000000L ) ) % 1000) >> 3);
     4ec:	23 e0       	ldi	r18, 0x03	; 3
     4ee:	23 0f       	add	r18, r19
	if (f >= (1000 >> 3)) {
     4f0:	2d 37       	cpi	r18, 0x7D	; 125
     4f2:	20 f4       	brcc	.+8      	; 0x4fc <__vector_16+0x3a>
{
	// read the registers from the memory
	unsigned long m = time_ms;
	unsigned char f = time_fraction;
	// compute the time in ms and fraction
	m += (((64 * 256) / (F_CPU / 1000000L)) / 1000);
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	a1 1d       	adc	r26, r1
     4f8:	b1 1d       	adc	r27, r1
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <__vector_16+0x44>
	f += ((((64 * 256) / ( F_CPU / 1000000L ) ) % 1000) >> 3);
	if (f >= (1000 >> 3)) {
		f -= (1000 >> 3);
     4fc:	26 e8       	ldi	r18, 0x86	; 134
     4fe:	23 0f       	add	r18, r19
		m += 1;
     500:	02 96       	adiw	r24, 0x02	; 2
     502:	a1 1d       	adc	r26, r1
     504:	b1 1d       	adc	r27, r1
	}
	// write to the registers in memory
	time_fraction = f;
     506:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <_ZL13time_fraction>
	time_ms = m;
     50a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <time_ms>
     50e:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <time_ms+0x1>
     512:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <time_ms+0x2>
     516:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <time_ms+0x3>
	time_counter++;
     51a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <time_counter>
     51e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <time_counter+0x1>
     522:	a0 91 74 01 	lds	r26, 0x0174	; 0x800174 <time_counter+0x2>
     526:	b0 91 75 01 	lds	r27, 0x0175	; 0x800175 <time_counter+0x3>
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	a1 1d       	adc	r26, r1
     52e:	b1 1d       	adc	r27, r1
     530:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <time_counter>
     534:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <time_counter+0x1>
     538:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <time_counter+0x2>
     53c:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <time_counter+0x3>
}
     540:	bf 91       	pop	r27
     542:	af 91       	pop	r26
     544:	9f 91       	pop	r25
     546:	8f 91       	pop	r24
     548:	3f 91       	pop	r19
     54a:	2f 91       	pop	r18
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <__vector_18>:
	if (data <0) Write('-');
	char c[UART_FLOAT_BUFFER_SIZE];
	itoa(data, c);
	Write(c);
	#endif
}
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	8f 93       	push	r24
     562:	9f 93       	push	r25
     564:	ef 93       	push	r30
     566:	ff 93       	push	r31
     568:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     56c:	8c 71       	andi	r24, 0x1C	; 28
     56e:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <_ZL11UART_RxHead>
     572:	ef 5f       	subi	r30, 0xFF	; 255
     574:	ef 71       	andi	r30, 0x1F	; 31
     576:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <_ZL11UART_RxTail>
     57a:	e9 17       	cp	r30, r25
     57c:	49 f0       	breq	.+18     	; 0x590 <__vector_18+0x3a>
     57e:	e0 93 78 01 	sts	0x0178, r30	; 0x800178 <_ZL11UART_RxHead>
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     588:	e5 58       	subi	r30, 0x85	; 133
     58a:	fe 4f       	sbci	r31, 0xFE	; 254
     58c:	90 83       	st	Z, r25
     58e:	01 c0       	rjmp	.+2      	; 0x592 <__vector_18+0x3c>
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <_ZL16UART_LastRxError>
     596:	89 2b       	or	r24, r25
     598:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <_ZL16UART_LastRxError>
     59c:	ff 91       	pop	r31
     59e:	ef 91       	pop	r30
     5a0:	9f 91       	pop	r25
     5a2:	8f 91       	pop	r24
     5a4:	0f 90       	pop	r0
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <__vector_19>:
     5ae:	1f 92       	push	r1
     5b0:	0f 92       	push	r0
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
     5c0:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_ZL11UART_TxHead>
     5c4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_ZL11UART_TxTail>
     5c8:	98 17       	cp	r25, r24
     5ca:	69 f0       	breq	.+26     	; 0x5e6 <__vector_19+0x38>
     5cc:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <_ZL11UART_TxTail>
     5d0:	ef 5f       	subi	r30, 0xFF	; 255
     5d2:	ef 71       	andi	r30, 0x1F	; 31
     5d4:	e0 93 79 01 	sts	0x0179, r30	; 0x800179 <_ZL11UART_TxTail>
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	e5 56       	subi	r30, 0x65	; 101
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	80 81       	ld	r24, Z
     5e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <__vector_19+0x42>
     5e6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     5ea:	8f 7d       	andi	r24, 0xDF	; 223
     5ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	0f 90       	pop	r0
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	0f 90       	pop	r0
     5fe:	1f 90       	pop	r1
     600:	18 95       	reti

00000602 <_ZN4UARTC1Ev>:
     602:	08 95       	ret

00000604 <_ZN4UARTD1Ev>:
     604:	08 95       	ret

00000606 <_ZN4UART4InitERKj>:
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	ec 01       	movw	r28, r24
     610:	fb 01       	movw	r30, r22
     612:	20 81       	ld	r18, Z
     614:	31 81       	ldd	r19, Z+1	; 0x01
     616:	89 01       	movw	r16, r18
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	d9 01       	movw	r26, r18
     61e:	c8 01       	movw	r24, r16
     620:	80 58       	subi	r24, 0x80	; 128
     622:	9b 47       	sbci	r25, 0x7B	; 123
     624:	a1 4e       	sbci	r26, 0xE1	; 225
     626:	bf 4f       	sbci	r27, 0xFF	; 255
     628:	bc 01       	movw	r22, r24
     62a:	cd 01       	movw	r24, r26
     62c:	43 e0       	ldi	r20, 0x03	; 3
     62e:	66 0f       	add	r22, r22
     630:	77 1f       	adc	r23, r23
     632:	88 1f       	adc	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	4a 95       	dec	r20
     638:	d1 f7       	brne	.-12     	; 0x62e <_ZN4UART4InitERKj+0x28>
     63a:	a9 01       	movw	r20, r18
     63c:	98 01       	movw	r18, r16
     63e:	e4 e0       	ldi	r30, 0x04	; 4
     640:	22 0f       	add	r18, r18
     642:	33 1f       	adc	r19, r19
     644:	44 1f       	adc	r20, r20
     646:	55 1f       	adc	r21, r21
     648:	ea 95       	dec	r30
     64a:	d1 f7       	brne	.-12     	; 0x640 <_ZN4UART4InitERKj+0x3a>
     64c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__udivmodsi4>
     650:	21 50       	subi	r18, 0x01	; 1
     652:	31 09       	sbc	r19, r1
     654:	39 83       	std	Y+1, r19	; 0x01
     656:	28 83       	st	Y, r18
     658:	37 ff       	sbrs	r19, 7
     65a:	03 c0       	rjmp	.+6      	; 0x662 <_ZN4UART4InitERKj+0x5c>
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	80 78       	andi	r24, 0x80	; 128
     666:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     66a:	88 81       	ld	r24, Y
     66c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     670:	88 e9       	ldi	r24, 0x98	; 152
     672:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     676:	86 e0       	ldi	r24, 0x06	; 6
     678:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <_ZN4UART5WriteEc>:
     686:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_ZL11UART_TxHead>
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	8f 71       	andi	r24, 0x1F	; 31
     68e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <_ZL11UART_TxTail>
     692:	89 17       	cp	r24, r25
     694:	e1 f3       	breq	.-8      	; 0x68e <_ZN4UART5WriteEc+0x8>
     696:	e8 2f       	mov	r30, r24
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	e5 56       	subi	r30, 0x65	; 101
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	60 83       	st	Z, r22
     6a0:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <_ZL11UART_TxHead>
     6a4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     6a8:	80 62       	ori	r24, 0x20	; 32
     6aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     6ae:	08 95       	ret

000006b0 <_ZN4UART5WriteEPKc>:
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	8c 01       	movw	r16, r24
     6ba:	eb 01       	movw	r28, r22
     6bc:	69 91       	ld	r22, Y+
     6be:	66 23       	and	r22, r22
     6c0:	21 f0       	breq	.+8      	; 0x6ca <_ZN4UART5WriteEPKc+0x1a>
     6c2:	c8 01       	movw	r24, r16
     6c4:	0e 94 43 03 	call	0x686	; 0x686 <_ZN4UART5WriteEc>
     6c8:	f9 cf       	rjmp	.-14     	; 0x6bc <_ZN4UART5WriteEPKc+0xc>
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <_ZN4UART7reverseEPci>:
     6d4:	ca 01       	movw	r24, r20
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	fb 01       	movw	r30, r22
     6da:	e4 0f       	add	r30, r20
     6dc:	f5 1f       	adc	r31, r21
     6de:	db 01       	movw	r26, r22
     6e0:	9d 01       	movw	r18, r26
     6e2:	26 1b       	sub	r18, r22
     6e4:	37 0b       	sbc	r19, r23
     6e6:	28 17       	cp	r18, r24
     6e8:	39 07       	cpc	r19, r25
     6ea:	34 f4       	brge	.+12     	; 0x6f8 <_ZN4UART7reverseEPci+0x24>
     6ec:	2c 91       	ld	r18, X
     6ee:	32 91       	ld	r19, -Z
     6f0:	3d 93       	st	X+, r19
     6f2:	20 83       	st	Z, r18
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f4 cf       	rjmp	.-24     	; 0x6e0 <_ZN4UART7reverseEPci+0xc>
     6f8:	08 95       	ret

000006fa <_ZN4UART8intToStrEiPci>:
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	7c 01       	movw	r14, r24
     70c:	cb 01       	movw	r24, r22
     70e:	8a 01       	movw	r16, r20
     710:	fa 01       	movw	r30, r20
     712:	4a e0       	ldi	r20, 0x0A	; 10
     714:	c4 2e       	mov	r12, r20
     716:	d1 2c       	mov	r13, r1
     718:	ef 01       	movw	r28, r30
     71a:	c0 1b       	sub	r28, r16
     71c:	d1 0b       	sbc	r29, r17
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	39 f0       	breq	.+14     	; 0x730 <_ZN4UART8intToStrEiPci+0x36>
     722:	b6 01       	movw	r22, r12
     724:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__divmodhi4>
     728:	80 5d       	subi	r24, 0xD0	; 208
     72a:	81 93       	st	Z+, r24
     72c:	cb 01       	movw	r24, r22
     72e:	f4 cf       	rjmp	.-24     	; 0x718 <_ZN4UART8intToStrEiPci+0x1e>
     730:	f8 01       	movw	r30, r16
     732:	ec 0f       	add	r30, r28
     734:	fd 1f       	adc	r31, r29
     736:	80 e3       	ldi	r24, 0x30	; 48
     738:	c2 17       	cp	r28, r18
     73a:	d3 07       	cpc	r29, r19
     73c:	1c f4       	brge	.+6      	; 0x744 <_ZN4UART8intToStrEiPci+0x4a>
     73e:	21 96       	adiw	r28, 0x01	; 1
     740:	81 93       	st	Z+, r24
     742:	fa cf       	rjmp	.-12     	; 0x738 <_ZN4UART8intToStrEiPci+0x3e>
     744:	ae 01       	movw	r20, r28
     746:	b8 01       	movw	r22, r16
     748:	c7 01       	movw	r24, r14
     74a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN4UART7reverseEPci>
     74e:	f8 01       	movw	r30, r16
     750:	ec 0f       	add	r30, r28
     752:	fd 1f       	adc	r31, r29
     754:	10 82       	st	Z, r1
     756:	ce 01       	movw	r24, r28
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	df 90       	pop	r13
     766:	cf 90       	pop	r12
     768:	08 95       	ret

0000076a <_ZN4UART4itoaElPc>:
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	fc 01       	movw	r30, r24
     770:	d4 2f       	mov	r29, r20
     772:	c5 2f       	mov	r28, r21
     774:	b6 2f       	mov	r27, r22
     776:	a7 2f       	mov	r26, r23
     778:	a9 01       	movw	r20, r18
     77a:	6d 2f       	mov	r22, r29
     77c:	7c 2f       	mov	r23, r28
     77e:	8b 2f       	mov	r24, r27
     780:	9a 2f       	mov	r25, r26
     782:	97 ff       	sbrs	r25, 7
     784:	07 c0       	rjmp	.+14     	; 0x794 <_ZN4UART4itoaElPc+0x2a>
     786:	90 95       	com	r25
     788:	80 95       	com	r24
     78a:	70 95       	com	r23
     78c:	61 95       	neg	r22
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	8f 4f       	sbci	r24, 0xFF	; 255
     792:	9f 4f       	sbci	r25, 0xFF	; 255
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	cf 01       	movw	r24, r30
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_ZN4UART8intToStrEiPci>

000007a2 <_ZN4UART5WriteEj>:
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	c0 54       	subi	r28, 0x40	; 64
     7b0:	d1 09       	sbc	r29, r1
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	8c 01       	movw	r16, r24
     7be:	ab 01       	movw	r20, r22
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	9e 01       	movw	r18, r28
     7c6:	2f 5f       	subi	r18, 0xFF	; 255
     7c8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ca:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN4UART4itoaElPc>
     7ce:	be 01       	movw	r22, r28
     7d0:	6f 5f       	subi	r22, 0xFF	; 255
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	c8 01       	movw	r24, r16
     7d6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
     7da:	c0 5c       	subi	r28, 0xC0	; 192
     7dc:	df 4f       	sbci	r29, 0xFF	; 255
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <_ZN4UART5WriteEa>:
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	c0 54       	subi	r28, 0x40	; 64
     802:	d1 09       	sbc	r29, r1
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	7c 01       	movw	r14, r24
     810:	16 2f       	mov	r17, r22
     812:	67 ff       	sbrs	r22, 7
     814:	03 c0       	rjmp	.+6      	; 0x81c <_ZN4UART5WriteEa+0x2a>
     816:	6d e2       	ldi	r22, 0x2D	; 45
     818:	0e 94 43 03 	call	0x686	; 0x686 <_ZN4UART5WriteEc>
     81c:	41 2f       	mov	r20, r17
     81e:	11 0f       	add	r17, r17
     820:	55 0b       	sbc	r21, r21
     822:	66 0b       	sbc	r22, r22
     824:	77 0b       	sbc	r23, r23
     826:	9e 01       	movw	r18, r28
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	c7 01       	movw	r24, r14
     82e:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN4UART4itoaElPc>
     832:	be 01       	movw	r22, r28
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	c7 01       	movw	r24, r14
     83a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
     83e:	c0 5c       	subi	r28, 0xC0	; 192
     840:	df 4f       	sbci	r29, 0xFF	; 255
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	08 95       	ret

00000858 <_GLOBAL__sub_I___vector_18>:
     858:	8b eb       	ldi	r24, 0xBB	; 187
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0c 94 99 00 	jmp	0x132	; 0x132 <_ZN3MCUC1Ev>

00000860 <_GLOBAL__sub_D___vector_18>:
     860:	8b eb       	ldi	r24, 0xBB	; 187
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00000868 <_GLOBAL__sub_I__ZN14VibrationMotorC2Eh>:
     868:	8d eb       	ldi	r24, 0xBD	; 189
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0c 94 99 00 	jmp	0x132	; 0x132 <_ZN3MCUC1Ev>

00000870 <_GLOBAL__sub_D__ZN14VibrationMotorC2Eh>:
     870:	8d eb       	ldi	r24, 0xBD	; 189
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00000878 <_GLOBAL__sub_I_SmartHand.cpp>:
     878:	84 ec       	ldi	r24, 0xC4	; 196
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 99 00 	call	0x132	; 0x132 <_ZN3MCUC1Ev>
     880:	8f eb       	ldi	r24, 0xBF	; 191
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0c 94 01 03 	jmp	0x602	; 0x602 <_ZN4UARTC1Ev>

00000888 <_GLOBAL__sub_D_SmartHand.cpp>:
     888:	8f eb       	ldi	r24, 0xBF	; 191
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 02 03 	call	0x604	; 0x604 <_ZN4UARTD1Ev>
     890:	84 ec       	ldi	r24, 0xC4	; 196
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00000898 <_ZN8InfraredC1ERKh>:
}

void Infrared::disableKalman()
{
	_en_kalman = false;
	delete _kalman;
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	ec 01       	movw	r28, r24
     89e:	fb 01       	movw	r30, r22
     8a0:	80 81       	ld	r24, Z
     8a2:	88 83       	st	Y, r24
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	60 81       	ld	r22, Z
     8a8:	8b ec       	ldi	r24, 0xCB	; 203
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
     8b0:	1b 82       	std	Y+3, r1	; 0x03
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <_ZN8Infrared8read_rawEv>:
     8b8:	af 92       	push	r10
     8ba:	bf 92       	push	r11
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	fc 01       	movw	r30, r24
     8ca:	60 81       	ld	r22, Z
     8cc:	8b ec       	ldi	r24, 0xCB	; 203
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN3MCU9getPinADCEh>
     8d4:	bc 01       	movw	r22, r24
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatunsisf>
     8de:	23 e4       	ldi	r18, 0x43	; 67
     8e0:	2f 93       	push	r18
     8e2:	2f e7       	ldi	r18, 0x7F	; 127
     8e4:	2f 93       	push	r18
     8e6:	1f 92       	push	r1
     8e8:	1f 92       	push	r1
     8ea:	a1 2c       	mov	r10, r1
     8ec:	b1 2c       	mov	r11, r1
     8ee:	65 01       	movw	r12, r10
     8f0:	e1 2c       	mov	r14, r1
     8f2:	f1 2c       	mov	r15, r1
     8f4:	01 e6       	ldi	r16, 0x61	; 97
     8f6:	14 e4       	ldi	r17, 0x44	; 68
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4a ef       	ldi	r20, 0xFA	; 250
     8fe:	53 e4       	ldi	r21, 0x43	; 67
     900:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14linear_mappingfffff>
     904:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	86 2f       	mov	r24, r22
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	08 95       	ret

00000926 <_ZN8Infrared4readEv>:
     926:	cf 92       	push	r12
     928:	df 92       	push	r13
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
     938:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_ZN8Infrared8read_rawEv>
     93c:	2b 81       	ldd	r18, Y+3	; 0x03
     93e:	22 23       	and	r18, r18
     940:	e1 f0       	breq	.+56     	; 0x97a <_ZN8Infrared4readEv+0x54>
     942:	bc 01       	movw	r22, r24
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatunsisf>
     94c:	6b 01       	movw	r12, r22
     94e:	7c 01       	movw	r14, r24
     950:	00 e0       	ldi	r16, 0x00	; 0
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	98 01       	movw	r18, r16
     956:	ab 01       	movw	r20, r22
     958:	bc 01       	movw	r22, r24
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN6Kalman6filterEff>
     962:	00 e0       	ldi	r16, 0x00	; 0
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	98 01       	movw	r18, r16
     968:	b7 01       	movw	r22, r14
     96a:	a6 01       	movw	r20, r12
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	9a 81       	ldd	r25, Y+2	; 0x02
     970:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN6Kalman6filterEff>
     974:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
     978:	cb 01       	movw	r24, r22
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <_GLOBAL__sub_I__ZN8InfraredC2ERKh>:
     98c:	8b ec       	ldi	r24, 0xCB	; 203
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 99 00 	call	0x132	; 0x132 <_ZN3MCUC1Ev>
     994:	86 ec       	ldi	r24, 0xC6	; 198
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0c 94 01 03 	jmp	0x602	; 0x602 <_ZN4UARTC1Ev>

0000099c <_GLOBAL__sub_D__ZN8InfraredC2ERKh>:
     99c:	86 ec       	ldi	r24, 0xC6	; 198
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 02 03 	call	0x604	; 0x604 <_ZN4UARTD1Ev>
     9a4:	8b ec       	ldi	r24, 0xCB	; 203
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

000009ac <_ZN6KalmanC1Efffff>:

}

float Kalman::predict(float u) {
	return A * x + B * u;
}
     9ac:	8f 92       	push	r8
     9ae:	9f 92       	push	r9
     9b0:	af 92       	push	r10
     9b2:	bf 92       	push	r11
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	fc 01       	movw	r30, r24
     9ca:	40 83       	st	Z, r20
     9cc:	51 83       	std	Z+1, r21	; 0x01
     9ce:	62 83       	std	Z+2, r22	; 0x02
     9d0:	73 83       	std	Z+3, r23	; 0x03
     9d2:	04 83       	std	Z+4, r16	; 0x04
     9d4:	15 83       	std	Z+5, r17	; 0x05
     9d6:	26 83       	std	Z+6, r18	; 0x06
     9d8:	37 83       	std	Z+7, r19	; 0x07
     9da:	c0 86       	std	Z+8, r12	; 0x08
     9dc:	d1 86       	std	Z+9, r13	; 0x09
     9de:	e2 86       	std	Z+10, r14	; 0x0a
     9e0:	f3 86       	std	Z+11, r15	; 0x0b
     9e2:	84 86       	std	Z+12, r8	; 0x0c
     9e4:	95 86       	std	Z+13, r9	; 0x0d
     9e6:	a6 86       	std	Z+14, r10	; 0x0e
     9e8:	b7 86       	std	Z+15, r11	; 0x0f
     9ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ec:	98 89       	ldd	r25, Y+16	; 0x10
     9ee:	a9 89       	ldd	r26, Y+17	; 0x11
     9f0:	ba 89       	ldd	r27, Y+18	; 0x12
     9f2:	80 8b       	std	Z+16, r24	; 0x10
     9f4:	91 8b       	std	Z+17, r25	; 0x11
     9f6:	a2 8b       	std	Z+18, r26	; 0x12
     9f8:	b3 8b       	std	Z+19, r27	; 0x13
     9fa:	14 8e       	std	Z+28, r1	; 0x1c
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	08 95       	ret

00000a16 <_ZN6Kalman11uncertaintyEv>:

float Kalman::uncertainty() {
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	ec 01       	movw	r28, r24
	return A * A * cov + R;
     a1c:	68 85       	ldd	r22, Y+8	; 0x08
     a1e:	79 85       	ldd	r23, Y+9	; 0x09
     a20:	8a 85       	ldd	r24, Y+10	; 0x0a
     a22:	9b 85       	ldd	r25, Y+11	; 0x0b
     a24:	9b 01       	movw	r18, r22
     a26:	ac 01       	movw	r20, r24
     a28:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     a2c:	2c 89       	ldd	r18, Y+20	; 0x14
     a2e:	3d 89       	ldd	r19, Y+21	; 0x15
     a30:	4e 89       	ldd	r20, Y+22	; 0x16
     a32:	5f 89       	ldd	r21, Y+23	; 0x17
     a34:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     a38:	28 81       	ld	r18, Y
     a3a:	39 81       	ldd	r19, Y+1	; 0x01
     a3c:	4a 81       	ldd	r20, Y+2	; 0x02
     a3e:	5b 81       	ldd	r21, Y+3	; 0x03
     a40:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <_ZN6Kalman6filterEff>:
	B = b;
	C = c;
	init = false;
}

float Kalman::filter(float z, float u) {
     a4a:	4f 92       	push	r4
     a4c:	5f 92       	push	r5
     a4e:	6f 92       	push	r6
     a50:	7f 92       	push	r7
     a52:	8f 92       	push	r8
     a54:	9f 92       	push	r9
     a56:	af 92       	push	r10
     a58:	bf 92       	push	r11
     a5a:	cf 92       	push	r12
     a5c:	df 92       	push	r13
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	2a 97       	sbiw	r28, 0x0a	; 10
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	9a 87       	std	Y+10, r25	; 0x0a
     a7c:	89 87       	std	Y+9, r24	; 0x09
     a7e:	49 83       	std	Y+1, r20	; 0x01
     a80:	5a 83       	std	Y+2, r21	; 0x02
     a82:	6b 83       	std	Y+3, r22	; 0x03
     a84:	7c 83       	std	Y+4, r23	; 0x04
     a86:	28 01       	movw	r4, r16
     a88:	39 01       	movw	r6, r18
	if (!init) {
     a8a:	fc 01       	movw	r30, r24
     a8c:	84 8d       	ldd	r24, Z+28	; 0x1c
     a8e:	c0 88       	ldd	r12, Z+16	; 0x10
     a90:	d1 88       	ldd	r13, Z+17	; 0x11
     a92:	e2 88       	ldd	r14, Z+18	; 0x12
     a94:	f3 88       	ldd	r15, Z+19	; 0x13
     a96:	81 11       	cpse	r24, r1
     a98:	2d c0       	rjmp	.+90     	; 0xaf4 <_ZN6Kalman6filterEff+0xaa>
		x = 1 / C * z;
     a9a:	a7 01       	movw	r20, r14
     a9c:	96 01       	movw	r18, r12
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 e8       	ldi	r24, 0x80	; 128
     aa4:	9f e3       	ldi	r25, 0x3F	; 63
     aa6:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
     aaa:	29 81       	ldd	r18, Y+1	; 0x01
     aac:	3a 81       	ldd	r19, Y+2	; 0x02
     aae:	4b 81       	ldd	r20, Y+3	; 0x03
     ab0:	5c 81       	ldd	r21, Y+4	; 0x04
     ab2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     ab6:	e9 85       	ldd	r30, Y+9	; 0x09
     ab8:	fa 85       	ldd	r31, Y+10	; 0x0a
     aba:	60 8f       	std	Z+24, r22	; 0x18
     abc:	71 8f       	std	Z+25, r23	; 0x19
     abe:	82 8f       	std	Z+26, r24	; 0x1a
     ac0:	93 8f       	std	Z+27, r25	; 0x1b
		cov = Q / (C * C);
     ac2:	a7 01       	movw	r20, r14
     ac4:	96 01       	movw	r18, r12
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	e9 85       	ldd	r30, Y+9	; 0x09
     ad4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ad6:	64 81       	ldd	r22, Z+4	; 0x04
     ad8:	75 81       	ldd	r23, Z+5	; 0x05
     ada:	86 81       	ldd	r24, Z+6	; 0x06
     adc:	97 81       	ldd	r25, Z+7	; 0x07
     ade:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
     ae2:	e9 85       	ldd	r30, Y+9	; 0x09
     ae4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ae6:	64 8b       	std	Z+20, r22	; 0x14
     ae8:	75 8b       	std	Z+21, r23	; 0x15
     aea:	86 8b       	std	Z+22, r24	; 0x16
     aec:	97 8b       	std	Z+23, r25	; 0x17
		init = true;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	84 8f       	std	Z+28, r24	; 0x1c
     af2:	7e c0       	rjmp	.+252    	; 0xbf0 <_ZN6Kalman6filterEff+0x1a6>
	return x;

}

float Kalman::predict(float u) {
	return A * x + B * u;
     af4:	e9 85       	ldd	r30, Y+9	; 0x09
     af6:	fa 85       	ldd	r31, Y+10	; 0x0a
     af8:	20 85       	ldd	r18, Z+8	; 0x08
     afa:	31 85       	ldd	r19, Z+9	; 0x09
     afc:	42 85       	ldd	r20, Z+10	; 0x0a
     afe:	53 85       	ldd	r21, Z+11	; 0x0b
     b00:	60 8d       	ldd	r22, Z+24	; 0x18
     b02:	71 8d       	ldd	r23, Z+25	; 0x19
     b04:	82 8d       	ldd	r24, Z+26	; 0x1a
     b06:	93 8d       	ldd	r25, Z+27	; 0x1b
     b08:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     b0c:	4b 01       	movw	r8, r22
     b0e:	5c 01       	movw	r10, r24
     b10:	e9 85       	ldd	r30, Y+9	; 0x09
     b12:	fa 85       	ldd	r31, Y+10	; 0x0a
     b14:	24 85       	ldd	r18, Z+12	; 0x0c
     b16:	35 85       	ldd	r19, Z+13	; 0x0d
     b18:	46 85       	ldd	r20, Z+14	; 0x0e
     b1a:	57 85       	ldd	r21, Z+15	; 0x0f
     b1c:	c3 01       	movw	r24, r6
     b1e:	b2 01       	movw	r22, r4
     b20:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
     b28:	c5 01       	movw	r24, r10
     b2a:	b4 01       	movw	r22, r8
     b2c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
     b30:	6d 83       	std	Y+5, r22	; 0x05
     b32:	7e 83       	std	Y+6, r23	; 0x06
     b34:	8f 83       	std	Y+7, r24	; 0x07
     b36:	98 87       	std	Y+8, r25	; 0x08
		init = true;
	}

	else {
		float pred = predict(u);
		float p_cov = uncertainty();
     b38:	89 85       	ldd	r24, Y+9	; 0x09
     b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b3c:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN6Kalman11uncertaintyEv>
     b40:	4b 01       	movw	r8, r22
     b42:	5c 01       	movw	r10, r24

		float K = p_cov * C / (C * C * p_cov + Q);
     b44:	a7 01       	movw	r20, r14
     b46:	96 01       	movw	r18, r12
     b48:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     b4c:	2b 01       	movw	r4, r22
     b4e:	3c 01       	movw	r6, r24
     b50:	a7 01       	movw	r20, r14
     b52:	96 01       	movw	r18, r12
     b54:	c7 01       	movw	r24, r14
     b56:	b6 01       	movw	r22, r12
     b58:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     b5c:	a5 01       	movw	r20, r10
     b5e:	94 01       	movw	r18, r8
     b60:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     b64:	e9 85       	ldd	r30, Y+9	; 0x09
     b66:	fa 85       	ldd	r31, Y+10	; 0x0a
     b68:	24 81       	ldd	r18, Z+4	; 0x04
     b6a:	35 81       	ldd	r19, Z+5	; 0x05
     b6c:	46 81       	ldd	r20, Z+6	; 0x06
     b6e:	57 81       	ldd	r21, Z+7	; 0x07
     b70:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c3 01       	movw	r24, r6
     b7a:	b2 01       	movw	r22, r4
     b7c:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
     b80:	2b 01       	movw	r4, r22
     b82:	3c 01       	movw	r6, r24

		x = pred + K * (z - C * pred);
     b84:	2d 81       	ldd	r18, Y+5	; 0x05
     b86:	3e 81       	ldd	r19, Y+6	; 0x06
     b88:	4f 81       	ldd	r20, Y+7	; 0x07
     b8a:	58 85       	ldd	r21, Y+8	; 0x08
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	69 81       	ldd	r22, Y+1	; 0x01
     b9a:	7a 81       	ldd	r23, Y+2	; 0x02
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
     ba4:	a3 01       	movw	r20, r6
     ba6:	92 01       	movw	r18, r4
     ba8:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     bac:	2d 81       	ldd	r18, Y+5	; 0x05
     bae:	3e 81       	ldd	r19, Y+6	; 0x06
     bb0:	4f 81       	ldd	r20, Y+7	; 0x07
     bb2:	58 85       	ldd	r21, Y+8	; 0x08
     bb4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
     bb8:	e9 85       	ldd	r30, Y+9	; 0x09
     bba:	fa 85       	ldd	r31, Y+10	; 0x0a
     bbc:	60 8f       	std	Z+24, r22	; 0x18
     bbe:	71 8f       	std	Z+25, r23	; 0x19
     bc0:	82 8f       	std	Z+26, r24	; 0x1a
     bc2:	93 8f       	std	Z+27, r25	; 0x1b
		cov = p_cov - K * C * p_cov;
     bc4:	a3 01       	movw	r20, r6
     bc6:	92 01       	movw	r18, r4
     bc8:	c7 01       	movw	r24, r14
     bca:	b6 01       	movw	r22, r12
     bcc:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     bd0:	a5 01       	movw	r20, r10
     bd2:	94 01       	movw	r18, r8
     bd4:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	c5 01       	movw	r24, r10
     bde:	b4 01       	movw	r22, r8
     be0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
     be4:	e9 85       	ldd	r30, Y+9	; 0x09
     be6:	fa 85       	ldd	r31, Y+10	; 0x0a
     be8:	64 8b       	std	Z+20, r22	; 0x14
     bea:	75 8b       	std	Z+21, r23	; 0x15
     bec:	86 8b       	std	Z+22, r24	; 0x16
     bee:	97 8b       	std	Z+23, r25	; 0x17

	}

	return x;
     bf0:	e9 85       	ldd	r30, Y+9	; 0x09
     bf2:	fa 85       	ldd	r31, Y+10	; 0x0a
     bf4:	60 8d       	ldd	r22, Z+24	; 0x18
     bf6:	71 8d       	ldd	r23, Z+25	; 0x19
     bf8:	82 8d       	ldd	r24, Z+26	; 0x1a
     bfa:	93 8d       	ldd	r25, Z+27	; 0x1b

}
     bfc:	2a 96       	adiw	r28, 0x0a	; 10
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	bf 90       	pop	r11
     c1a:	af 90       	pop	r10
     c1c:	9f 90       	pop	r9
     c1e:	8f 90       	pop	r8
     c20:	7f 90       	pop	r7
     c22:	6f 90       	pop	r6
     c24:	5f 90       	pop	r5
     c26:	4f 90       	pop	r4
     c28:	08 95       	ret

00000c2a <_ZN5MotorC1Ehhh>:
	mcu.setPinLevel(_pin_forward, LOW);
	mcu.setPinLevel(_pin_backward, HIGH);
}

// default destructor
Motor::~Motor()
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	fc 01       	movw	r30, r24
     c30:	d4 2f       	mov	r29, r20
     c32:	c2 2f       	mov	r28, r18
     c34:	60 83       	st	Z, r22
     c36:	41 83       	std	Z+1, r20	; 0x01
     c38:	22 83       	std	Z+2, r18	; 0x02
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	8d ec       	ldi	r24, 0xCD	; 205
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	6d 2f       	mov	r22, r29
     c48:	8d ec       	ldi	r24, 0xCD	; 205
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	6c 2f       	mov	r22, r28
     c54:	8d ec       	ldi	r24, 0xCD	; 205
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>

00000c60 <_ZN5Motor8setSpeedEh>:
     c60:	fc 01       	movw	r30, r24
     c62:	63 83       	std	Z+3, r22	; 0x03
     c64:	46 2f       	mov	r20, r22
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	60 81       	ld	r22, Z
     c6a:	8d ec       	ldi	r24, 0xCD	; 205
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_ZN3MCU9setPinPWMEhj>

00000c72 <_ZN5Motor11turnForwardEv>:
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ec 01       	movw	r28, r24
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	6a 81       	ldd	r22, Y+2	; 0x02
     c7c:	8d ec       	ldi	r24, 0xCD	; 205
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	69 81       	ldd	r22, Y+1	; 0x01
     c88:	8d ec       	ldi	r24, 0xCD	; 205
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	0c 94 b0 01 	jmp	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>

00000c94 <_ZN5Motor12turnBackwardEv>:
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	69 81       	ldd	r22, Y+1	; 0x01
     c9e:	8d ec       	ldi	r24, 0xCD	; 205
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	6a 81       	ldd	r22, Y+2	; 0x02
     caa:	8d ec       	ldi	r24, 0xCD	; 205
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	0c 94 b0 01 	jmp	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>

00000cb6 <_GLOBAL__sub_I__ZN5MotorC2Ehhh>:
     cb6:	8d ec       	ldi	r24, 0xCD	; 205
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0c 94 99 00 	jmp	0x132	; 0x132 <_ZN3MCUC1Ev>

00000cbe <_GLOBAL__sub_D__ZN5MotorC2Ehhh>:
     cbe:	8d ec       	ldi	r24, 0xCD	; 205
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00000cc6 <_ZN8SPIClass8transferEh>:
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     cc6:	8e bd       	out	0x2e, r24	; 46
     cc8:	00 00       	nop
     cca:	0d b4       	in	r0, 0x2d	; 45
     ccc:	07 fe       	sbrs	r0, 7
     cce:	fd cf       	rjmp	.-6      	; 0xcca <_ZN8SPIClass8transferEh+0x4>
     cd0:	8e b5       	in	r24, 0x2e	; 46
     cd2:	08 95       	ret

00000cd4 <_ZN4RF243csnEb>:
     cd4:	46 2f       	mov	r20, r22
     cd6:	2c b5       	in	r18, 0x2c	; 44
     cd8:	2f 7d       	andi	r18, 0xDF	; 223
     cda:	2c bd       	out	0x2c, r18	; 44
     cdc:	2c b5       	in	r18, 0x2c	; 44
     cde:	23 7f       	andi	r18, 0xF3	; 243
     ce0:	2c bd       	out	0x2c, r18	; 44
     ce2:	2c b5       	in	r18, 0x2c	; 44
     ce4:	2c 7f       	andi	r18, 0xFC	; 252
     ce6:	2c bd       	out	0x2c, r18	; 44
     ce8:	2d b5       	in	r18, 0x2d	; 45
     cea:	21 60       	ori	r18, 0x01	; 1
     cec:	2d bd       	out	0x2d, r18	; 45
     cee:	fc 01       	movw	r30, r24
     cf0:	62 81       	ldd	r22, Z+2	; 0x02
     cf2:	8f ec       	ldi	r24, 0xCF	; 207
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
     cfa:	fa e1       	ldi	r31, 0x1A	; 26
     cfc:	fa 95       	dec	r31
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <_ZN4RF243csnEb+0x28>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <_ZN4RF243csnEb+0x2e>
     d02:	08 95       	ret

00000d04 <_ZN4RF242ceEb>:
     d04:	46 2f       	mov	r20, r22
     d06:	fc 01       	movw	r30, r24
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	68 17       	cp	r22, r24
     d12:	79 07       	cpc	r23, r25
     d14:	21 f0       	breq	.+8      	; 0xd1e <_ZN4RF242ceEb+0x1a>
     d16:	8f ec       	ldi	r24, 0xCF	; 207
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0c 94 b0 01 	jmp	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
     d1e:	08 95       	ret

00000d20 <_ZN4RF2416beginTransactionEv>:
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <_ZN4RF243csnEb>

00000d26 <_ZN4RF2414endTransactionEv>:
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <_ZN4RF243csnEb>

00000d2c <_ZN4RF2413read_registerEh>:
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
     d34:	16 2f       	mov	r17, r22
     d36:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN4RF2416beginTransactionEv>
     d3a:	81 2f       	mov	r24, r17
     d3c:	8f 71       	andi	r24, 0x1F	; 31
     d3e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     d48:	18 2f       	mov	r17, r24
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN4RF2414endTransactionEv>
     d50:	81 2f       	mov	r24, r17
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	08 95       	ret

00000d5a <_ZN4RF2414write_registerEhPKhh>:
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	7c 01       	movw	r14, r24
     d6c:	16 2f       	mov	r17, r22
     d6e:	6a 01       	movw	r12, r20
     d70:	c2 2f       	mov	r28, r18
     d72:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN4RF2416beginTransactionEv>
     d76:	81 2f       	mov	r24, r17
     d78:	8f 71       	andi	r24, 0x1F	; 31
     d7a:	80 62       	ori	r24, 0x20	; 32
     d7c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     d80:	d8 2f       	mov	r29, r24
     d82:	86 01       	movw	r16, r12
     d84:	cc 23       	and	r28, r28
     d86:	39 f0       	breq	.+14     	; 0xd96 <_ZN4RF2414write_registerEhPKhh+0x3c>
     d88:	f8 01       	movw	r30, r16
     d8a:	81 91       	ld	r24, Z+
     d8c:	8f 01       	movw	r16, r30
     d8e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     d92:	c1 50       	subi	r28, 0x01	; 1
     d94:	f7 cf       	rjmp	.-18     	; 0xd84 <_ZN4RF2414write_registerEhPKhh+0x2a>
     d96:	c7 01       	movw	r24, r14
     d98:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN4RF2414endTransactionEv>
     d9c:	8d 2f       	mov	r24, r29
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	08 95       	ret

00000db0 <_ZN4RF2414write_registerEhh>:
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	8c 01       	movw	r16, r24
     dba:	c6 2f       	mov	r28, r22
     dbc:	d4 2f       	mov	r29, r20
     dbe:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN4RF2416beginTransactionEv>
     dc2:	8c 2f       	mov	r24, r28
     dc4:	8f 71       	andi	r24, 0x1F	; 31
     dc6:	80 62       	ori	r24, 0x20	; 32
     dc8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     dcc:	c8 2f       	mov	r28, r24
     dce:	8d 2f       	mov	r24, r29
     dd0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     dd4:	c8 01       	movw	r24, r16
     dd6:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN4RF2414endTransactionEv>
     dda:	8c 2f       	mov	r24, r28
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	08 95       	ret

00000de6 <_ZN4RF2413write_payloadEPKvhh>:
     de6:	bf 92       	push	r11
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	8c 01       	movw	r16, r24
     dfa:	b6 2e       	mov	r11, r22
     dfc:	c7 2e       	mov	r12, r23
     dfe:	f2 2e       	mov	r15, r18
     e00:	fc 01       	movw	r30, r24
     e02:	c7 81       	ldd	r28, Z+7	; 0x07
     e04:	dc 2f       	mov	r29, r28
     e06:	4c 17       	cp	r20, r28
     e08:	08 f4       	brcc	.+2      	; 0xe0c <_ZN4RF2413write_payloadEPKvhh+0x26>
     e0a:	d4 2f       	mov	r29, r20
     e0c:	f8 01       	movw	r30, r16
     e0e:	80 85       	ldd	r24, Z+8	; 0x08
     e10:	81 11       	cpse	r24, r1
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <_ZN4RF2413write_payloadEPKvhh+0x32>
     e14:	cd 1b       	sub	r28, r29
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <_ZN4RF2413write_payloadEPKvhh+0x34>
     e18:	c0 e0       	ldi	r28, 0x00	; 0
     e1a:	c8 01       	movw	r24, r16
     e1c:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN4RF2416beginTransactionEv>
     e20:	8f 2d       	mov	r24, r15
     e22:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     e26:	d8 2e       	mov	r13, r24
     e28:	eb 2c       	mov	r14, r11
     e2a:	fc 2c       	mov	r15, r12
     e2c:	dd 23       	and	r29, r29
     e2e:	39 f0       	breq	.+14     	; 0xe3e <_ZN4RF2413write_payloadEPKvhh+0x58>
     e30:	f7 01       	movw	r30, r14
     e32:	81 91       	ld	r24, Z+
     e34:	7f 01       	movw	r14, r30
     e36:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     e3a:	d1 50       	subi	r29, 0x01	; 1
     e3c:	f7 cf       	rjmp	.-18     	; 0xe2c <_ZN4RF2413write_payloadEPKvhh+0x46>
     e3e:	cc 23       	and	r28, r28
     e40:	29 f0       	breq	.+10     	; 0xe4c <_ZN4RF2413write_payloadEPKvhh+0x66>
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     e48:	c1 50       	subi	r28, 0x01	; 1
     e4a:	f9 cf       	rjmp	.-14     	; 0xe3e <_ZN4RF2413write_payloadEPKvhh+0x58>
     e4c:	c8 01       	movw	r24, r16
     e4e:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN4RF2414endTransactionEv>
     e52:	8d 2d       	mov	r24, r13
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	08 95       	ret

00000e68 <_ZN4RF2412read_payloadEPvh>:
     e68:	bf 92       	push	r11
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	8c 01       	movw	r16, r24
     e7c:	b6 2e       	mov	r11, r22
     e7e:	c7 2e       	mov	r12, r23
     e80:	fc 01       	movw	r30, r24
     e82:	c7 81       	ldd	r28, Z+7	; 0x07
     e84:	dc 2f       	mov	r29, r28
     e86:	4c 17       	cp	r20, r28
     e88:	08 f4       	brcc	.+2      	; 0xe8c <_ZN4RF2412read_payloadEPvh+0x24>
     e8a:	d4 2f       	mov	r29, r20
     e8c:	f8 01       	movw	r30, r16
     e8e:	80 85       	ldd	r24, Z+8	; 0x08
     e90:	81 11       	cpse	r24, r1
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <_ZN4RF2412read_payloadEPvh+0x30>
     e94:	cd 1b       	sub	r28, r29
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <_ZN4RF2412read_payloadEPvh+0x32>
     e98:	c0 e0       	ldi	r28, 0x00	; 0
     e9a:	c8 01       	movw	r24, r16
     e9c:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN4RF2416beginTransactionEv>
     ea0:	81 e6       	ldi	r24, 0x61	; 97
     ea2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     ea6:	d8 2e       	mov	r13, r24
     ea8:	eb 2c       	mov	r14, r11
     eaa:	fc 2c       	mov	r15, r12
     eac:	dd 23       	and	r29, r29
     eae:	41 f0       	breq	.+16     	; 0xec0 <_ZN4RF2412read_payloadEPvh+0x58>
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     eb6:	f7 01       	movw	r30, r14
     eb8:	81 93       	st	Z+, r24
     eba:	7f 01       	movw	r14, r30
     ebc:	d1 50       	subi	r29, 0x01	; 1
     ebe:	f6 cf       	rjmp	.-20     	; 0xeac <_ZN4RF2412read_payloadEPvh+0x44>
     ec0:	cc 23       	and	r28, r28
     ec2:	29 f0       	breq	.+10     	; 0xece <_ZN4RF2412read_payloadEPvh+0x66>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     eca:	c1 50       	subi	r28, 0x01	; 1
     ecc:	f9 cf       	rjmp	.-14     	; 0xec0 <_ZN4RF2412read_payloadEPvh+0x58>
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN4RF2414endTransactionEv>
     ed4:	8d 2d       	mov	r24, r13
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	08 95       	ret

00000eea <_ZN4RF248spiTransEh>:
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	ec 01       	movw	r28, r24
     ef2:	16 2f       	mov	r17, r22
     ef4:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN4RF2416beginTransactionEv>
     ef8:	81 2f       	mov	r24, r17
     efa:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
     efe:	18 2f       	mov	r17, r24
     f00:	ce 01       	movw	r24, r28
     f02:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN4RF2414endTransactionEv>
     f06:	81 2f       	mov	r24, r17
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	08 95       	ret

00000f10 <_ZN4RF248flush_rxEv>:
     f10:	62 ee       	ldi	r22, 0xE2	; 226
     f12:	0c 94 75 07 	jmp	0xeea	; 0xeea <_ZN4RF248spiTransEh>

00000f16 <_ZN4RF248flush_txEv>:
     f16:	61 ee       	ldi	r22, 0xE1	; 225
     f18:	0c 94 75 07 	jmp	0xeea	; 0xeea <_ZN4RF248spiTransEh>

00000f1c <_ZN4RF2410get_statusEv>:
     f1c:	6f ef       	ldi	r22, 0xFF	; 255
     f1e:	0c 94 75 07 	jmp	0xeea	; 0xeea <_ZN4RF248spiTransEh>

00000f22 <_ZN4RF24C1Ejj>:
     f22:	fc 01       	movw	r30, r24
     f24:	71 83       	std	Z+1, r23	; 0x01
     f26:	60 83       	st	Z, r22
     f28:	53 83       	std	Z+3, r21	; 0x03
     f2a:	42 83       	std	Z+2, r20	; 0x02
     f2c:	16 82       	std	Z+6, r1	; 0x06
     f2e:	80 e2       	ldi	r24, 0x20	; 32
     f30:	87 83       	std	Z+7, r24	; 0x07
     f32:	10 86       	std	Z+8, r1	; 0x08
     f34:	85 e0       	ldi	r24, 0x05	; 5
     f36:	86 87       	std	Z+14, r24	; 0x0e
     f38:	85 e0       	ldi	r24, 0x05	; 5
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	84 8b       	std	Z+20, r24	; 0x14
     f42:	95 8b       	std	Z+21, r25	; 0x15
     f44:	a6 8b       	std	Z+22, r26	; 0x16
     f46:	b7 8b       	std	Z+23, r27	; 0x17
     f48:	11 86       	std	Z+9, r1	; 0x09
     f4a:	08 95       	ret

00000f4c <_ZN4RF2410setChannelEh>:
     f4c:	6d 37       	cpi	r22, 0x7D	; 125
     f4e:	10 f4       	brcc	.+4      	; 0xf54 <_ZN4RF2410setChannelEh+0x8>
     f50:	46 2f       	mov	r20, r22
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <_ZN4RF2410setChannelEh+0xa>
     f54:	4d e7       	ldi	r20, 0x7D	; 125
     f56:	65 e0       	ldi	r22, 0x05	; 5
     f58:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>

00000f5c <_ZN4RF2413stopListeningEv>:
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN4RF242ceEb>
     f68:	8f e1       	ldi	r24, 0x1F	; 31
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <_ZN4RF2413stopListeningEv+0x10>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <_ZN4RF2413stopListeningEv+0x16>
     f72:	00 00       	nop
     f74:	6d e1       	ldi	r22, 0x1D	; 29
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
     f7c:	81 ff       	sbrs	r24, 1
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <_ZN4RF2413stopListeningEv+0x36>
     f80:	8f e1       	ldi	r24, 0x1F	; 31
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <_ZN4RF2413stopListeningEv+0x28>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <_ZN4RF2413stopListeningEv+0x2e>
     f8a:	00 00       	nop
     f8c:	ce 01       	movw	r24, r28
     f8e:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN4RF248flush_txEv>
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	ce 01       	movw	r24, r28
     f96:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
     f9a:	48 2f       	mov	r20, r24
     f9c:	4e 7f       	andi	r20, 0xFE	; 254
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	ce 01       	movw	r24, r28
     fa2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
     fa6:	62 e0       	ldi	r22, 0x02	; 2
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
     fae:	e4 e7       	ldi	r30, 0x74	; 116
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	e4 91       	lpm	r30, Z
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <_ZN4RF2413stopListeningEv+0x60>
     fba:	44 0f       	add	r20, r20
     fbc:	ea 95       	dec	r30
     fbe:	ea f7       	brpl	.-6      	; 0xfba <_ZN4RF2413stopListeningEv+0x5e>
     fc0:	48 2b       	or	r20, r24
     fc2:	62 e0       	ldi	r22, 0x02	; 2
     fc4:	ce 01       	movw	r24, r28
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>

00000fce <_ZN4RF247powerUpEv>:
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
     fda:	81 fd       	sbrc	r24, 1
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <_ZN4RF247powerUpEv+0x28>
     fde:	48 2f       	mov	r20, r24
     fe0:	42 60       	ori	r20, 0x02	; 2
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	ce 01       	movw	r24, r28
     fe6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
     fea:	8f e1       	ldi	r24, 0x1F	; 31
     fec:	9e e4       	ldi	r25, 0x4E	; 78
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <_ZN4RF247powerUpEv+0x20>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <_ZN4RF247powerUpEv+0x26>
     ff4:	00 00       	nop
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <_ZN4RF2414startFastWriteEPKvhbb>:
     ffc:	0f 93       	push	r16
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24
    1004:	21 11       	cpse	r18, r1
    1006:	02 c0       	rjmp	.+4      	; 0x100c <_ZN4RF2414startFastWriteEPKvhbb+0x10>
    1008:	20 ea       	ldi	r18, 0xA0	; 160
    100a:	01 c0       	rjmp	.+2      	; 0x100e <_ZN4RF2414startFastWriteEPKvhbb+0x12>
    100c:	20 eb       	ldi	r18, 0xB0	; 176
    100e:	ce 01       	movw	r24, r28
    1010:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN4RF2413write_payloadEPKvhh>
    1014:	00 23       	and	r16, r16
    1016:	39 f0       	breq	.+14     	; 0x1026 <_ZN4RF2414startFastWriteEPKvhbb+0x2a>
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	ce 01       	movw	r24, r28
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	0f 91       	pop	r16
    1022:	0c 94 82 06 	jmp	0xd04	; 0xd04 <_ZN4RF242ceEb>
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	0f 91       	pop	r16
    102c:	08 95       	ret

0000102e <_ZN4RF245writeEPKvhb>:
    102e:	0f 93       	push	r16
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ec 01       	movw	r28, r24
    1036:	01 e0       	ldi	r16, 0x01	; 1
    1038:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN4RF2414startFastWriteEPKvhbb>
    103c:	ce 01       	movw	r24, r28
    103e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZN4RF2410get_statusEv>
    1042:	80 73       	andi	r24, 0x30	; 48
    1044:	d9 f3       	breq	.-10     	; 0x103c <_ZN4RF245writeEPKvhb+0xe>
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	ce 01       	movw	r24, r28
    104a:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN4RF242ceEb>
    104e:	40 e7       	ldi	r20, 0x70	; 112
    1050:	67 e0       	ldi	r22, 0x07	; 7
    1052:	ce 01       	movw	r24, r28
    1054:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    1058:	84 ff       	sbrs	r24, 4
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <_ZN4RF245writeEPKvhb+0x38>
    105c:	ce 01       	movw	r24, r28
    105e:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN4RF248flush_txEv>
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <_ZN4RF245writeEPKvhb+0x3a>
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <_ZN4RF245writeEPKvh>:
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	0c 94 17 08 	jmp	0x102e	; 0x102e <_ZN4RF245writeEPKvhb>

00001076 <_ZN4RF249availableEPh>:
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	8c 01       	movw	r16, r24
    1080:	eb 01       	movw	r28, r22
    1082:	67 e1       	ldi	r22, 0x17	; 23
    1084:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    1088:	80 fd       	sbrc	r24, 0
    108a:	0b c0       	rjmp	.+22     	; 0x10a2 <_ZN4RF249availableEPh+0x2c>
    108c:	20 97       	sbiw	r28, 0x00	; 0
    108e:	59 f0       	breq	.+22     	; 0x10a6 <_ZN4RF249availableEPh+0x30>
    1090:	c8 01       	movw	r24, r16
    1092:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZN4RF2410get_statusEv>
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	95 95       	asr	r25
    109a:	87 95       	ror	r24
    109c:	87 70       	andi	r24, 0x07	; 7
    109e:	88 83       	st	Y, r24
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <_ZN4RF249availableEPh+0x30>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <_ZN4RF249availableEPh+0x32>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	08 95       	ret

000010b2 <_ZN4RF249availableEv>:
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <_ZN4RF249availableEPh>

000010ba <_ZN4RF244readEPvh>:
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	ec 01       	movw	r28, r24
    10c0:	0e 94 34 07 	call	0xe68	; 0xe68 <_ZN4RF2412read_payloadEPvh>
    10c4:	40 e7       	ldi	r20, 0x70	; 112
    10c6:	67 e0       	ldi	r22, 0x07	; 7
    10c8:	ce 01       	movw	r24, r28
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>

000010d2 <_ZN4RF2415openWritingPipeEPKh>:
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    10dc:	8b 01       	movw	r16, r22
    10de:	2e 85       	ldd	r18, Y+14	; 0x0e
    10e0:	ab 01       	movw	r20, r22
    10e2:	6a e0       	ldi	r22, 0x0A	; 10
    10e4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN4RF2414write_registerEhPKhh>
    10e8:	2e 85       	ldd	r18, Y+14	; 0x0e
    10ea:	a8 01       	movw	r20, r16
    10ec:	60 e1       	ldi	r22, 0x10	; 16
    10ee:	ce 01       	movw	r24, r28
    10f0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN4RF2414write_registerEhPKhh>
    10f4:	4f 81       	ldd	r20, Y+7	; 0x07
    10f6:	61 e1       	ldi	r22, 0x11	; 17
    10f8:	ce 01       	movw	r24, r28
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>

00001106 <_ZN4RF2415openReadingPipeEhPKh>:
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	8c 01       	movw	r16, r24
    1114:	c6 2f       	mov	r28, r22
    1116:	7a 01       	movw	r14, r20
    1118:	61 11       	cpse	r22, r1
    111a:	08 c0       	rjmp	.+16     	; 0x112c <_ZN4RF2415openReadingPipeEhPKh+0x26>
    111c:	fc 01       	movw	r30, r24
    111e:	46 85       	ldd	r20, Z+14	; 0x0e
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	b7 01       	movw	r22, r14
    1124:	09 96       	adiw	r24, 0x09	; 9
    1126:	0e 94 e6 12 	call	0x25cc	; 0x25cc <memcpy>
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <_ZN4RF2415openReadingPipeEhPKh+0x30>
    112c:	67 30       	cpi	r22, 0x07	; 7
    112e:	08 f0       	brcs	.+2      	; 0x1132 <_ZN4RF2415openReadingPipeEhPKh+0x2c>
    1130:	37 c0       	rjmp	.+110    	; 0x11a0 <_ZN4RF2415openReadingPipeEhPKh+0x9a>
    1132:	61 30       	cpi	r22, 0x01	; 1
    1134:	41 f4       	brne	.+16     	; 0x1146 <_ZN4RF2415openReadingPipeEhPKh+0x40>
    1136:	ec 2f       	mov	r30, r28
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	e2 59       	subi	r30, 0x92	; 146
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	64 91       	lpm	r22, Z
    1140:	f8 01       	movw	r30, r16
    1142:	26 85       	ldd	r18, Z+14	; 0x0e
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <_ZN4RF2415openReadingPipeEhPKh+0x4c>
    1146:	e6 2f       	mov	r30, r22
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	e2 59       	subi	r30, 0x92	; 146
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	64 91       	lpm	r22, Z
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	a7 01       	movw	r20, r14
    1154:	c8 01       	movw	r24, r16
    1156:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN4RF2414write_registerEhPKhh>
    115a:	d0 e0       	ldi	r29, 0x00	; 0
    115c:	fe 01       	movw	r30, r28
    115e:	e8 59       	subi	r30, 0x98	; 152
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	64 91       	lpm	r22, Z
    1164:	f8 01       	movw	r30, r16
    1166:	47 81       	ldd	r20, Z+7	; 0x07
    1168:	c8 01       	movw	r24, r16
    116a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    116e:	62 e0       	ldi	r22, 0x02	; 2
    1170:	c8 01       	movw	r24, r16
    1172:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    1176:	fe 01       	movw	r30, r28
    1178:	ec 58       	subi	r30, 0x8C	; 140
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	e4 91       	lpm	r30, Z
    117e:	41 e0       	ldi	r20, 0x01	; 1
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <_ZN4RF2415openReadingPipeEhPKh+0x80>
    1184:	44 0f       	add	r20, r20
    1186:	ea 95       	dec	r30
    1188:	ea f7       	brpl	.-6      	; 0x1184 <_ZN4RF2415openReadingPipeEhPKh+0x7e>
    118a:	48 2b       	or	r20, r24
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	c8 01       	movw	r24, r16
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	08 95       	ret

000011ae <_ZN4RF2416closeReadingPipeEh>:
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	8c 01       	movw	r16, r24
    11b6:	c6 2f       	mov	r28, r22
    11b8:	62 e0       	ldi	r22, 0x02	; 2
    11ba:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    11be:	ec 2f       	mov	r30, r28
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	ec 58       	subi	r30, 0x8C	; 140
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	e4 91       	lpm	r30, Z
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <_ZN4RF2416closeReadingPipeEh+0x22>
    11ce:	22 0f       	add	r18, r18
    11d0:	ea 95       	dec	r30
    11d2:	ea f7       	brpl	.-6      	; 0x11ce <_ZN4RF2416closeReadingPipeEh+0x20>
    11d4:	20 95       	com	r18
    11d6:	42 2f       	mov	r20, r18
    11d8:	48 23       	and	r20, r24
    11da:	62 e0       	ldi	r22, 0x02	; 2
    11dc:	c8 01       	movw	r24, r16
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>

000011e8 <_ZN4RF2414startListeningEv>:
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	ec 01       	movw	r28, r24
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    11f4:	48 2f       	mov	r20, r24
    11f6:	41 60       	ori	r20, 0x01	; 1
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	ce 01       	movw	r24, r28
    11fc:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    1200:	40 e7       	ldi	r20, 0x70	; 112
    1202:	67 e0       	ldi	r22, 0x07	; 7
    1204:	ce 01       	movw	r24, r28
    1206:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	ce 01       	movw	r24, r28
    120e:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN4RF242ceEb>
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	88 23       	and	r24, r24
    1216:	49 f0       	breq	.+18     	; 0x122a <_ZN4RF2414startListeningEv+0x42>
    1218:	2e 85       	ldd	r18, Y+14	; 0x0e
    121a:	ae 01       	movw	r20, r28
    121c:	47 5f       	subi	r20, 0xF7	; 247
    121e:	5f 4f       	sbci	r21, 0xFF	; 255
    1220:	6a e0       	ldi	r22, 0x0A	; 10
    1222:	ce 01       	movw	r24, r28
    1224:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN4RF2414write_registerEhPKhh>
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <_ZN4RF2414startListeningEv+0x4a>
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	ce 01       	movw	r24, r28
    122e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN4RF2416closeReadingPipeEh>
    1232:	6d e1       	ldi	r22, 0x1D	; 29
    1234:	ce 01       	movw	r24, r28
    1236:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    123a:	81 ff       	sbrs	r24, 1
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <_ZN4RF2414startListeningEv+0x60>
    123e:	ce 01       	movw	r24, r28
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <_ZN4RF248flush_txEv>
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <_ZN4RF2415toggle_featuresEv>:
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN4RF2416beginTransactionEv>
    1258:	80 e5       	ldi	r24, 0x50	; 80
    125a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
    125e:	83 e7       	ldi	r24, 0x73	; 115
    1260:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8SPIClass8transferEh>
    1264:	ce 01       	movw	r24, r28
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	0c 94 93 06 	jmp	0xd26	; 0xd26 <_ZN4RF2414endTransactionEv>

0000126e <_ZN4RF2411setDataRateE15rf24_datarate_e>:
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	8c 01       	movw	r16, r24
    1278:	d6 2f       	mov	r29, r22
    127a:	66 e0       	ldi	r22, 0x06	; 6
    127c:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    1280:	c8 2f       	mov	r28, r24
    1282:	c7 7d       	andi	r28, 0xD7	; 215
    1284:	d2 30       	cpi	r29, 0x02	; 2
    1286:	31 f4       	brne	.+12     	; 0x1294 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x26>
    1288:	c0 62       	ori	r28, 0x20	; 32
    128a:	8b e9       	ldi	r24, 0x9B	; 155
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	0c c0       	rjmp	.+24     	; 0x12ac <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3e>
    1294:	d1 30       	cpi	r29, 0x01	; 1
    1296:	29 f0       	breq	.+10     	; 0x12a2 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x34>
    1298:	85 e5       	ldi	r24, 0x55	; 85
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	05 c0       	rjmp	.+10     	; 0x12ac <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3e>
    12a2:	c8 60       	ori	r28, 0x08	; 8
    12a4:	81 e4       	ldi	r24, 0x41	; 65
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e0       	ldi	r26, 0x00	; 0
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	f8 01       	movw	r30, r16
    12ae:	80 8b       	std	Z+16, r24	; 0x10
    12b0:	91 8b       	std	Z+17, r25	; 0x11
    12b2:	a2 8b       	std	Z+18, r26	; 0x12
    12b4:	b3 8b       	std	Z+19, r27	; 0x13
    12b6:	4c 2f       	mov	r20, r28
    12b8:	66 e0       	ldi	r22, 0x06	; 6
    12ba:	c8 01       	movw	r24, r16
    12bc:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    12c0:	66 e0       	ldi	r22, 0x06	; 6
    12c2:	c8 01       	movw	r24, r16
    12c4:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	c8 13       	cpse	r28, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	89 2f       	mov	r24, r25
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <_ZN4RF245beginEv>:
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	68 81       	ld	r22, Y
    12e4:	79 81       	ldd	r23, Y+1	; 0x01
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ea:	68 17       	cp	r22, r24
    12ec:	79 07       	cpc	r23, r25
    12ee:	29 f0       	breq	.+10     	; 0x12fa <_ZN4RF245beginEv+0x20>
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	8f ec       	ldi	r24, 0xCF	; 207
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
    12fa:	6a 81       	ldd	r22, Y+2	; 0x02
    12fc:	7b 81       	ldd	r23, Y+3	; 0x03
    12fe:	88 81       	ld	r24, Y
    1300:	99 81       	ldd	r25, Y+1	; 0x01
    1302:	86 17       	cp	r24, r22
    1304:	97 07       	cpc	r25, r23
    1306:	29 f0       	breq	.+10     	; 0x1312 <_ZN4RF245beginEv+0x38>
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	8f ec       	ldi	r24, 0xCF	; 207
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
    1312:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN8SPIClass5beginEv>
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	ce 01       	movw	r24, r28
    131a:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN4RF242ceEb>
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	ce 01       	movw	r24, r28
    1322:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN4RF243csnEb>
    1326:	8f e1       	ldi	r24, 0x1F	; 31
    1328:	9e e4       	ldi	r25, 0x4E	; 78
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	f1 f7       	brne	.-4      	; 0x132a <_ZN4RF245beginEv+0x50>
    132e:	00 c0       	rjmp	.+0      	; 0x1330 <_ZN4RF245beginEv+0x56>
    1330:	00 00       	nop
    1332:	4c e0       	ldi	r20, 0x0C	; 12
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	ce 01       	movw	r24, r28
    1338:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    133c:	4f e5       	ldi	r20, 0x5F	; 95
    133e:	64 e0       	ldi	r22, 0x04	; 4
    1340:	ce 01       	movw	r24, r28
    1342:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    1346:	62 e0       	ldi	r22, 0x02	; 2
    1348:	ce 01       	movw	r24, r28
    134a:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN4RF2411setDataRateE15rf24_datarate_e>
    134e:	88 23       	and	r24, r24
    1350:	11 f0       	breq	.+4      	; 0x1356 <_ZN4RF245beginEv+0x7c>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	8e 83       	std	Y+6, r24	; 0x06
    1356:	66 e0       	ldi	r22, 0x06	; 6
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    135e:	18 2f       	mov	r17, r24
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	ce 01       	movw	r24, r28
    1364:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN4RF2411setDataRateE15rf24_datarate_e>
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 27 09 	call	0x124e	; 0x124e <_ZN4RF2415toggle_featuresEv>
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	6d e1       	ldi	r22, 0x1D	; 29
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	6c e1       	ldi	r22, 0x1C	; 28
    137c:	ce 01       	movw	r24, r28
    137e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    1382:	18 86       	std	Y+8, r1	; 0x08
    1384:	40 e7       	ldi	r20, 0x70	; 112
    1386:	67 e0       	ldi	r22, 0x07	; 7
    1388:	ce 01       	movw	r24, r28
    138a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    138e:	6c e4       	ldi	r22, 0x4C	; 76
    1390:	ce 01       	movw	r24, r28
    1392:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4RF2410setChannelEh>
    1396:	ce 01       	movw	r24, r28
    1398:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZN4RF248flush_rxEv>
    139c:	ce 01       	movw	r24, r28
    139e:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN4RF248flush_txEv>
    13a2:	ce 01       	movw	r24, r28
    13a4:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN4RF247powerUpEv>
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	ce 01       	movw	r24, r28
    13ac:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN4RF2413read_registerEh>
    13b0:	48 2f       	mov	r20, r24
    13b2:	4e 7f       	andi	r20, 0xFE	; 254
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	ce 01       	movw	r24, r28
    13b8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN4RF2414write_registerEhh>
    13bc:	11 50       	subi	r17, 0x01	; 1
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	1e 3f       	cpi	r17, 0xFE	; 254
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <_ZN4RF245beginEv+0xec>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	08 95       	ret

000013ce <_GLOBAL__sub_I__ZN4RF243csnEb>:
    13ce:	8f ec       	ldi	r24, 0xCF	; 207
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	0c 94 99 00 	jmp	0x132	; 0x132 <_ZN3MCUC1Ev>

000013d6 <_GLOBAL__sub_D__ZN4RF243csnEb>:
    13d6:	8f ec       	ldi	r24, 0xCF	; 207
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

000013de <_GLOBAL__sub_I__ZN7RGB_LEDC2Ehhhhh>:
    13de:	81 ed       	ldi	r24, 0xD1	; 209
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	0c 94 99 00 	jmp	0x132	; 0x132 <_ZN3MCUC1Ev>

000013e6 <_GLOBAL__sub_D__ZN7RGB_LEDC2Ehhhhh>:
    13e6:	81 ed       	ldi	r24, 0xD1	; 209
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

000013ee <_ZN5ServoC1Eh>:
volatile unsigned int value_reg;
volatile unsigned int signal_pin;

/****************** end of static functions ******************************/

Servo::Servo(uint8_t pin): _pin(pin)
    13ee:	fc 01       	movw	r30, r24
    13f0:	60 83       	st	Z, r22
{
	// store the pin number to memory
	signal_pin = pin;
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	70 93 d6 01 	sts	0x01D6, r23	; 0x8001d6 <signal_pin+0x1>
    13f8:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <signal_pin>
    13fc:	08 95       	ret

000013fe <_ZN5ServoD1Ev>:
	
}


 Servo::~Servo()
    13fe:	08 95       	ret

00001400 <_ZN5Servo4initEv>:

}

void Servo::init(){
	// initialize timer
	TCCR1A = 0;
    1400:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// set prescaler to 8
	TCCR1B = _BV(CS11);
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// clear the timer count
	TCNT1 = 0;
    140a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    140e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// clear the corresponding interrupt
	TIFR1 |= _BV(OCF1A);
    1412:	b1 9a       	sbi	0x16, 1	; 22
	// enable output compare interrupt
	TIMSK1 |=  _BV(OCIE1A) ;
    1414:	ef e6       	ldi	r30, 0x6F	; 111
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	82 60       	ori	r24, 0x02	; 2
    141c:	80 83       	st	Z, r24
    141e:	08 95       	ret

00001420 <_ZN5Servo5writeEi>:
	}

}
#endif
void Servo::write(int value)
{
    1420:	af 92       	push	r10
    1422:	bf 92       	push	r11
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
	// be sure that the angle is within the range
	if(value < 0) value = 0;
    1430:	77 fd       	sbrc	r23, 7
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <_ZN5Servo5writeEi+0x20>
	if(value > 180) value = 180;
    1434:	65 3b       	cpi	r22, 0xB5	; 181
    1436:	71 05       	cpc	r23, r1
    1438:	2c f0       	brlt	.+10     	; 0x1444 <_ZN5Servo5writeEi+0x24>
    143a:	64 eb       	ldi	r22, 0xB4	; 180
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <_ZN5Servo5writeEi+0x24>
}
#endif
void Servo::write(int value)
{
	// be sure that the angle is within the range
	if(value < 0) value = 0;
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	70 e0       	ldi	r23, 0x00	; 0
	if(value > 180) value = 180;
	value = linear_mapping(value, 0, 180, MIN_PULSE_WIDTH,  MAX_PULSE_WIDTH);
    1444:	07 2e       	mov	r0, r23
    1446:	00 0c       	add	r0, r0
    1448:	88 0b       	sbc	r24, r24
    144a:	99 0b       	sbc	r25, r25
    144c:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1450:	25 e4       	ldi	r18, 0x45	; 69
    1452:	2f 93       	push	r18
    1454:	26 e1       	ldi	r18, 0x16	; 22
    1456:	2f 93       	push	r18
    1458:	1f 92       	push	r1
    145a:	1f 92       	push	r1
    145c:	a1 2c       	mov	r10, r1
    145e:	b1 2c       	mov	r11, r1
    1460:	26 e1       	ldi	r18, 0x16	; 22
    1462:	c2 2e       	mov	r12, r18
    1464:	24 e4       	ldi	r18, 0x44	; 68
    1466:	d2 2e       	mov	r13, r18
    1468:	e1 2c       	mov	r14, r1
    146a:	f1 2c       	mov	r15, r1
    146c:	04 e3       	ldi	r16, 0x34	; 52
    146e:	13 e4       	ldi	r17, 0x43	; 67
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	a9 01       	movw	r20, r18
    1476:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14linear_mappingfffff>
    147a:	0e 94 94 10 	call	0x2128	; 0x2128 <__fixsfsi>
	// calculate the register value
	value = (( F_CPU / 1000000L)* value) / 8;
	// store status register and stop interrupts
	uint8_t oldSREG = SREG;
    147e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1480:	f8 94       	cli
	// set the register value
	value_reg = value;
    1482:	cb 01       	movw	r24, r22
    1484:	77 0f       	add	r23, r23
    1486:	aa 0b       	sbc	r26, r26
    1488:	bb 0b       	sbc	r27, r27
    148a:	44 e0       	ldi	r20, 0x04	; 4
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	aa 1f       	adc	r26, r26
    1492:	bb 1f       	adc	r27, r27
    1494:	4a 95       	dec	r20
    1496:	d1 f7       	brne	.-12     	; 0x148c <_ZN5Servo5writeEi+0x6c>
    1498:	53 e0       	ldi	r21, 0x03	; 3
    149a:	b6 95       	lsr	r27
    149c:	a7 95       	ror	r26
    149e:	97 95       	ror	r25
    14a0:	87 95       	ror	r24
    14a2:	5a 95       	dec	r21
    14a4:	d1 f7       	brne	.-12     	; 0x149a <_ZN5Servo5writeEi+0x7a>
    14a6:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <value_reg+0x1>
    14aa:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <value_reg>
	// reset the status register
	SREG = oldSREG;
    14ae:	2f bf       	out	0x3f, r18	; 63
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	df 90       	pop	r13
    14c2:	cf 90       	pop	r12
    14c4:	bf 90       	pop	r11
    14c6:	af 90       	pop	r10
    14c8:	08 95       	ret

000014ca <__vector_11>:
#if DEVICE == 1
volatile uint8_t srv_pos_dir = 0;
volatile uint8_t pos = 0;

ISR (TIMER1_COMPA_vect)
{
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	2f 93       	push	r18
    14d6:	3f 93       	push	r19
    14d8:	4f 93       	push	r20
    14da:	5f 93       	push	r21
    14dc:	6f 93       	push	r22
    14de:	7f 93       	push	r23
    14e0:	8f 93       	push	r24
    14e2:	9f 93       	push	r25
    14e4:	af 93       	push	r26
    14e6:	bf 93       	push	r27
    14e8:	ef 93       	push	r30
    14ea:	ff 93       	push	r31
	// generate the pulse
	mcu.setPinLevel(signal_pin,LOW);
    14ec:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <signal_pin>
    14f0:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <signal_pin+0x1>
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	8a ed       	ldi	r24, 0xDA	; 218
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
	mcu.setPinLevel(signal_pin,HIGH);
    14fe:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <signal_pin>
    1502:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <signal_pin+0x1>
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	8a ed       	ldi	r24, 0xDA	; 218
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
	// set the duty cycle
	OCR1A = TCNT1 + value_reg; // TCNT1 is reset equal 0
    1510:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1514:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1518:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <value_reg>
    151c:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <value_reg+0x1>
    1520:	82 0f       	add	r24, r18
    1522:	93 1f       	adc	r25, r19
    1524:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1528:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	if (OCR1A % 10 == 0){
    152c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1530:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1534:	6a e0       	ldi	r22, 0x0A	; 10
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__udivmodhi4>
    153c:	89 2b       	or	r24, r25
    153e:	19 f5       	brne	.+70     	; 0x1586 <__vector_11+0xbc>
		if (srv_pos_dir) pos ++;
    1540:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <srv_pos_dir>
    1544:	88 23       	and	r24, r24
    1546:	21 f0       	breq	.+8      	; 0x1550 <__vector_11+0x86>
    1548:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <pos>
    154c:	8f 5f       	subi	r24, 0xFF	; 255
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <__vector_11+0x8c>
		else pos --;
    1550:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <pos>
    1554:	81 50       	subi	r24, 0x01	; 1
    1556:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <pos>
		if (pos == 20) srv_pos_dir = 0;
    155a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <pos>
    155e:	84 31       	cpi	r24, 0x14	; 20
    1560:	11 f4       	brne	.+4      	; 0x1566 <__vector_11+0x9c>
    1562:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <srv_pos_dir>
		if (pos == 0) srv_pos_dir = 1;
    1566:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <pos>
    156a:	81 11       	cpse	r24, r1
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <__vector_11+0xaa>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <srv_pos_dir>
		servo.write(90+pos);
    1574:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <pos>
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	66 5a       	subi	r22, 0xA6	; 166
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	89 ed       	ldi	r24, 0xD9	; 217
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	0e 94 10 0a 	call	0x1420	; 0x1420 <_ZN5Servo5writeEi>
	}

}
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <_GLOBAL__sub_I_value_reg>:
    15a8:	8a ed       	ldi	r24, 0xDA	; 218
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	0e 94 99 00 	call	0x132	; 0x132 <_ZN3MCUC1Ev>
volatile unsigned int value_reg;
volatile unsigned int signal_pin;

/****************** end of static functions ******************************/

Servo::Servo(uint8_t pin): _pin(pin)
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <_ZL5servo>
{
	// store the pin number to memory
	signal_pin = pin;
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <signal_pin+0x1>
    15be:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <signal_pin>
    15c2:	08 95       	ret

000015c4 <_GLOBAL__sub_D_value_reg>:
    15c4:	8a ed       	ldi	r24, 0xDA	; 218
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

000015cc <_ZN8SPIClass5beginEv>:
    // this case can't be reached
  }
  interruptMask &= ~mask;
  if (!interruptMask)
    interruptMode = 0;
  SREG = sreg;
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cf b7       	in	r28, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_ZN8SPIClass11initializedE>
    15da:	81 11       	cpse	r24, r1
    15dc:	33 c0       	rjmp	.+102    	; 0x1644 <_ZN8SPIClass5beginEv+0x78>
    15de:	6a e0       	ldi	r22, 0x0A	; 10
    15e0:	8d ed       	ldi	r24, 0xDD	; 221
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN3MCU10getPinPortEh>
    15e8:	18 2f       	mov	r17, r24
    15ea:	6a e0       	ldi	r22, 0x0A	; 10
    15ec:	8d ed       	ldi	r24, 0xDD	; 221
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	0e 94 20 01 	call	0x240	; 0x240 <_ZN3MCU10getPinMaskEh>
    15f4:	d8 2f       	mov	r29, r24
    15f6:	61 2f       	mov	r22, r17
    15f8:	8d ed       	ldi	r24, 0xDD	; 221
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN3MCU14getPinFunctionEh>
    1600:	fc 01       	movw	r30, r24
    1602:	80 81       	ld	r24, Z
    1604:	8d 23       	and	r24, r29
    1606:	31 f4       	brne	.+12     	; 0x1614 <_ZN8SPIClass5beginEv+0x48>
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	6a e0       	ldi	r22, 0x0A	; 10
    160c:	8d ed       	ldi	r24, 0xDD	; 221
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	6a e0       	ldi	r22, 0x0A	; 10
    1618:	8d ed       	ldi	r24, 0xDD	; 221
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
    1620:	8c b5       	in	r24, 0x2c	; 44
    1622:	80 61       	ori	r24, 0x10	; 16
    1624:	8c bd       	out	0x2c, r24	; 44
    1626:	8c b5       	in	r24, 0x2c	; 44
    1628:	80 64       	ori	r24, 0x40	; 64
    162a:	8c bd       	out	0x2c, r24	; 44
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	6d e0       	ldi	r22, 0x0D	; 13
    1630:	8d ed       	ldi	r24, 0xDD	; 221
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	6b e0       	ldi	r22, 0x0B	; 11
    163c:	8d ed       	ldi	r24, 0xDD	; 221
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
    1644:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_ZN8SPIClass11initializedE>
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_ZN8SPIClass11initializedE>
    164e:	cf bf       	out	0x3f, r28	; 63
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	1f 91       	pop	r17
    1656:	08 95       	ret

00001658 <_GLOBAL__sub_I_SPI>:
    1658:	8d ed       	ldi	r24, 0xDD	; 221
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	0c 94 99 00 	jmp	0x132	; 0x132 <_ZN3MCUC1Ev>

00001660 <_GLOBAL__sub_D_SPI>:
    1660:	8d ed       	ldi	r24, 0xDD	; 221
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00001668 <_ZN10UltrasonicC1ERKhS1_>:
}

void Ultrasonic::disableKalman()
{
	_en_kalman = false;
	delete _kalman;
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
    1672:	8a 01       	movw	r16, r20
    1674:	fb 01       	movw	r30, r22
    1676:	80 81       	ld	r24, Z
    1678:	88 83       	st	Y, r24
    167a:	fa 01       	movw	r30, r20
    167c:	80 81       	ld	r24, Z
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	fb 01       	movw	r30, r22
    1684:	60 81       	ld	r22, Z
    1686:	8f ed       	ldi	r24, 0xDF	; 223
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	f8 01       	movw	r30, r16
    1692:	60 81       	ld	r22, Z
    1694:	8f ed       	ldi	r24, 0xDF	; 223
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN3MCU14setPinFunctionEhh>
    169c:	1c 82       	std	Y+4, r1	; 0x04
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	08 95       	ret

000016a8 <_ZN10Ultrasonic12enableKalmanEv>:
    16a8:	6f 92       	push	r6
    16aa:	7f 92       	push	r7
    16ac:	8f 92       	push	r8
    16ae:	9f 92       	push	r9
    16b0:	af 92       	push	r10
    16b2:	bf 92       	push	r11
    16b4:	cf 92       	push	r12
    16b6:	df 92       	push	r13
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	ec 01       	movw	r28, r24
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	8c 83       	std	Y+4, r24	; 0x04
    16ca:	8d e1       	ldi	r24, 0x1D	; 29
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_Znwj>
    16d2:	3c 01       	movw	r6, r24
    16d4:	8f e3       	ldi	r24, 0x3F	; 63
    16d6:	8f 93       	push	r24
    16d8:	80 e8       	ldi	r24, 0x80	; 128
    16da:	8f 93       	push	r24
    16dc:	1f 92       	push	r1
    16de:	1f 92       	push	r1
    16e0:	81 2c       	mov	r8, r1
    16e2:	91 2c       	mov	r9, r1
    16e4:	80 e8       	ldi	r24, 0x80	; 128
    16e6:	a8 2e       	mov	r10, r24
    16e8:	8f e3       	ldi	r24, 0x3F	; 63
    16ea:	b8 2e       	mov	r11, r24
    16ec:	75 01       	movw	r14, r10
    16ee:	64 01       	movw	r12, r8
    16f0:	95 01       	movw	r18, r10
    16f2:	84 01       	movw	r16, r8
    16f4:	b5 01       	movw	r22, r10
    16f6:	a4 01       	movw	r20, r8
    16f8:	c3 01       	movw	r24, r6
    16fa:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN6KalmanC1Efffff>
    16fe:	7b 82       	std	Y+3, r7	; 0x03
    1700:	6a 82       	std	Y+2, r6	; 0x02
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	7f 90       	pop	r7
    1724:	6f 90       	pop	r6
    1726:	08 95       	ret

00001728 <_ZN10Ultrasonic10countPulseEPVhhhm>:
}

uint32_t Ultrasonic::countPulse(volatile uint8_t *port, uint8_t bit, uint8_t stateMask, uint32_t maxloops)
{
    1728:	8f 92       	push	r8
    172a:	9f 92       	push	r9
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	fb 01       	movw	r30, r22
    173a:	52 2f       	mov	r21, r18
	uint32_t width = 0;
	// wait for any previous pulse to end
	while ((*port & bit) == stateMask)
    173c:	20 81       	ld	r18, Z
    173e:	24 23       	and	r18, r20
    1740:	25 13       	cpse	r18, r21
    1742:	0d c0       	rjmp	.+26     	; 0x175e <_ZN10Ultrasonic10countPulseEPVhhhm+0x36>
	if (--maxloops == 0)
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	e8 1a       	sub	r14, r24
    1748:	f1 08       	sbc	r15, r1
    174a:	01 09       	sbc	r16, r1
    174c:	11 09       	sbc	r17, r1
    174e:	b1 f7       	brne	.-20     	; 0x173c <_ZN10Ultrasonic10countPulseEPVhhhm+0x14>
    1750:	1b c0       	rjmp	.+54     	; 0x1788 <_ZN10Ultrasonic10countPulseEPVhhhm+0x60>
	return 0;
	
	// wait for the pulse to start
	while ((*port & bit) != stateMask)
	if (--maxloops == 0)
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	e8 1a       	sub	r14, r24
    1756:	f1 08       	sbc	r15, r1
    1758:	01 09       	sbc	r16, r1
    175a:	11 09       	sbc	r17, r1
    175c:	a9 f0       	breq	.+42     	; 0x1788 <_ZN10Ultrasonic10countPulseEPVhhhm+0x60>
	while ((*port & bit) == stateMask)
	if (--maxloops == 0)
	return 0;
	
	// wait for the pulse to start
	while ((*port & bit) != stateMask)
    175e:	20 81       	ld	r18, Z
    1760:	24 23       	and	r18, r20
    1762:	52 13       	cpse	r21, r18
    1764:	f6 cf       	rjmp	.-20     	; 0x1752 <_ZN10Ultrasonic10countPulseEPVhhhm+0x2a>
    1766:	81 2c       	mov	r8, r1
    1768:	91 2c       	mov	r9, r1
    176a:	54 01       	movw	r10, r8
	if (--maxloops == 0)
	return 0;
	
	// wait for the pulse to stop
	while ((*port & bit) == stateMask) {
    176c:	60 81       	ld	r22, Z
    176e:	64 23       	and	r22, r20
    1770:	56 13       	cpse	r21, r22
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <_ZN10Ultrasonic10countPulseEPVhhhm+0x6a>
		if (++width == maxloops)
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	88 1a       	sub	r8, r24
    1778:	98 0a       	sbc	r9, r24
    177a:	a8 0a       	sbc	r10, r24
    177c:	b8 0a       	sbc	r11, r24
    177e:	e8 14       	cp	r14, r8
    1780:	f9 04       	cpc	r15, r9
    1782:	0a 05       	cpc	r16, r10
    1784:	1b 05       	cpc	r17, r11
    1786:	91 f7       	brne	.-28     	; 0x176c <_ZN10Ultrasonic10countPulseEPVhhhm+0x44>
{
	uint32_t width = 0;
	// wait for any previous pulse to end
	while ((*port & bit) == stateMask)
	if (--maxloops == 0)
	return 0;
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <_ZN10Ultrasonic10countPulseEPVhhhm+0x6e>
    1792:	b4 01       	movw	r22, r8
    1794:	c5 01       	movw	r24, r10
	while ((*port & bit) == stateMask) {
		if (++width == maxloops)
		return 0;
	}
	return width;
}
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	bf 90       	pop	r11
    17a0:	af 90       	pop	r10
    17a2:	9f 90       	pop	r9
    17a4:	8f 90       	pop	r8
    17a6:	08 95       	ret

000017a8 <_ZN10Ultrasonic12capturePulseEhhm>:


uint32_t Ultrasonic::capturePulse(uint8_t pin, uint8_t state, uint32_t timeout)
{
    17a8:	9f 92       	push	r9
    17aa:	af 92       	push	r10
    17ac:	bf 92       	push	r11
    17ae:	cf 92       	push	r12
    17b0:	df 92       	push	r13
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	ec 01       	movw	r28, r24
    17c0:	a6 2e       	mov	r10, r22
    17c2:	94 2e       	mov	r9, r20
    17c4:	68 01       	movw	r12, r16
    17c6:	79 01       	movw	r14, r18
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// getPinLevel() instead yields much coarser resolution.
	uint8_t bit = mcu.getPinMask(pin);
    17c8:	8f ed       	ldi	r24, 0xDF	; 223
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	0e 94 20 01 	call	0x240	; 0x240 <_ZN3MCU10getPinMaskEh>
    17d0:	b8 2e       	mov	r11, r24
	uint8_t port = mcu.getPinPort(pin);
    17d2:	6a 2d       	mov	r22, r10
    17d4:	8f ed       	ldi	r24, 0xDF	; 223
    17d6:	91 e0       	ldi	r25, 0x01	; 1
    17d8:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN3MCU10getPinPortEh>
	uint8_t stateMask = (state ? bit : 0);
    17dc:	99 20       	and	r9, r9
    17de:	11 f0       	breq	.+4      	; 0x17e4 <_ZN10Ultrasonic12capturePulseEhhm+0x3c>
    17e0:	ab 2c       	mov	r10, r11
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <_ZN10Ultrasonic12capturePulseEhhm+0x3e>
    17e4:	a1 2c       	mov	r10, r1

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	uint32_t maxloops = ( ((timeout)/16) * ( F_CPU / 1000000L ) );

	uint32_t width = countPulse(mcu.getPinInput(port), bit, stateMask, maxloops);
    17e6:	68 2f       	mov	r22, r24
    17e8:	8f ed       	ldi	r24, 0xDF	; 223
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN3MCU11getPinInputEh>
    17f0:	87 01       	movw	r16, r14
    17f2:	76 01       	movw	r14, r12
    17f4:	20 ef       	ldi	r18, 0xF0	; 240
    17f6:	e2 22       	and	r14, r18
    17f8:	2a 2d       	mov	r18, r10
    17fa:	4b 2d       	mov	r20, r11
    17fc:	bc 01       	movw	r22, r24
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN10Ultrasonic10countPulseEPVhhhm>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    1804:	61 15       	cp	r22, r1
    1806:	71 05       	cpc	r23, r1
    1808:	81 05       	cpc	r24, r1
    180a:	91 05       	cpc	r25, r1
    180c:	49 f0       	breq	.+18     	; 0x1820 <_ZN10Ultrasonic12capturePulseEhhm+0x78>
	return ( (width * 16 + 16) / ( F_CPU / 1000000L ) );
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	a1 1d       	adc	r26, r1
    1816:	b1 1d       	adc	r27, r1
    1818:	bc 01       	movw	r22, r24
    181a:	cd 01       	movw	r24, r26
    181c:	9f 70       	andi	r25, 0x0F	; 15
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <_ZN10Ultrasonic12capturePulseEhhm+0x7e>
	else
	return 0;
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	cb 01       	movw	r24, r22
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	9f 90       	pop	r9
    183c:	08 95       	ret

0000183e <_ZN10Ultrasonic8read_rawEv>:
	}
	return data;
}

uint16_t Ultrasonic::read_raw()
{
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	ec 01       	movw	r28, r24
	int duration, distance;
	mcu.setPinLevel(_pin_trig, HIGH);
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	68 81       	ld	r22, Y
    184c:	8f ed       	ldi	r24, 0xDF	; 223
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1854:	8f ec       	ldi	r24, 0xCF	; 207
    1856:	97 e0       	ldi	r25, 0x07	; 7
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <_ZN10Ultrasonic8read_rawEv+0x1a>
    185c:	00 c0       	rjmp	.+0      	; 0x185e <_ZN10Ultrasonic8read_rawEv+0x20>
    185e:	00 00       	nop
	_delay_us(500);
	mcu.setPinLevel(_pin_trig, LOW);
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	68 81       	ld	r22, Y
    1864:	8f ed       	ldi	r24, 0xDF	; 223
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3MCU11setPinLevelEhh>
	duration = capturePulse(_pin_echo, HIGH, 1000000L);
    186c:	00 e4       	ldi	r16, 0x40	; 64
    186e:	12 e4       	ldi	r17, 0x42	; 66
    1870:	2f e0       	ldi	r18, 0x0F	; 15
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	69 81       	ldd	r22, Y+1	; 0x01
    1878:	ce 01       	movw	r24, r28
    187a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN10Ultrasonic12capturePulseEhhm>
	distance = (uint16_t)((duration/2) / 29.1);
	return distance;
    187e:	9b 01       	movw	r18, r22
    1880:	77 ff       	sbrs	r23, 7
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <_ZN10Ultrasonic8read_rawEv+0x4a>
    1884:	2f 5f       	subi	r18, 0xFF	; 255
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	b9 01       	movw	r22, r18
    188a:	75 95       	asr	r23
    188c:	67 95       	ror	r22
    188e:	07 2e       	mov	r0, r23
    1890:	00 0c       	add	r0, r0
    1892:	88 0b       	sbc	r24, r24
    1894:	99 0b       	sbc	r25, r25
    1896:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    189a:	2d ec       	ldi	r18, 0xCD	; 205
    189c:	3c ec       	ldi	r19, 0xCC	; 204
    189e:	48 ee       	ldi	r20, 0xE8	; 232
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
    18a6:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
}
    18aa:	cb 01       	movw	r24, r22
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <_ZN10Ultrasonic4readEv>:
Ultrasonic::~Ultrasonic()
{
} //~Ultrasonic

uint16_t Ultrasonic::read()
{
    18b6:	cf 92       	push	r12
    18b8:	df 92       	push	r13
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
	uint16_t data = read_raw();
    18c8:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZN10Ultrasonic8read_rawEv>
	if (_en_kalman){
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	22 23       	and	r18, r18
    18d0:	f1 f0       	breq	.+60     	; 0x190e <_ZN10Ultrasonic4readEv+0x58>
		_kalman->filter(data, 1);
    18d2:	bc 01       	movw	r22, r24
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatunsisf>
    18dc:	6b 01       	movw	r12, r22
    18de:	7c 01       	movw	r14, r24
    18e0:	00 e0       	ldi	r16, 0x00	; 0
    18e2:	10 e0       	ldi	r17, 0x00	; 0
    18e4:	20 e8       	ldi	r18, 0x80	; 128
    18e6:	3f e3       	ldi	r19, 0x3F	; 63
    18e8:	ab 01       	movw	r20, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN6Kalman6filterEff>
		data = _kalman->filter(data, 1);
    18f4:	00 e0       	ldi	r16, 0x00	; 0
    18f6:	10 e0       	ldi	r17, 0x00	; 0
    18f8:	20 e8       	ldi	r18, 0x80	; 128
    18fa:	3f e3       	ldi	r19, 0x3F	; 63
    18fc:	b7 01       	movw	r22, r14
    18fe:	a6 01       	movw	r20, r12
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	9b 81       	ldd	r25, Y+3	; 0x03
    1904:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN6Kalman6filterEff>
    1908:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    190c:	cb 01       	movw	r24, r22
	}
	return data;
}
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	08 95       	ret

00001920 <_GLOBAL__sub_I__ZN10UltrasonicC2ERKhS1_>:
    1920:	8f ed       	ldi	r24, 0xDF	; 223
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0c 94 99 00 	jmp	0x132	; 0x132 <_ZN3MCUC1Ev>

00001928 <_GLOBAL__sub_D__ZN10UltrasonicC2ERKhS1_>:
    1928:	8f ed       	ldi	r24, 0xDF	; 223
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00001930 <_Z14linear_mappingfffff>:
#include "Utility.h"

float linear_mapping(float input, float min_input, float max_input, float min_output, float max_output)
{
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	af 92       	push	r10
    193a:	bf 92       	push	r11
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	28 97       	sbiw	r28, 0x08	; 8
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	29 01       	movw	r4, r18
    195e:	3a 01       	movw	r6, r20
    1960:	ed 82       	std	Y+5, r14	; 0x05
    1962:	fe 82       	std	Y+6, r15	; 0x06
    1964:	0f 83       	std	Y+7, r16	; 0x07
    1966:	18 87       	std	Y+8, r17	; 0x08
	return (input - min_input) * (max_output - min_output) / (max_input - min_input) + min_output;
    1968:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    196c:	69 83       	std	Y+1, r22	; 0x01
    196e:	7a 83       	std	Y+2, r23	; 0x02
    1970:	8b 83       	std	Y+3, r24	; 0x03
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	a6 01       	movw	r20, r12
    1976:	95 01       	movw	r18, r10
    1978:	69 8d       	ldd	r22, Y+25	; 0x19
    197a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1980:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	69 81       	ldd	r22, Y+1	; 0x01
    198a:	7a 81       	ldd	r23, Y+2	; 0x02
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
    1994:	69 83       	std	Y+1, r22	; 0x01
    1996:	7a 83       	std	Y+2, r23	; 0x02
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	a3 01       	movw	r20, r6
    199e:	92 01       	movw	r18, r4
    19a0:	c8 01       	movw	r24, r16
    19a2:	b7 01       	movw	r22, r14
    19a4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    19a8:	9b 01       	movw	r18, r22
    19aa:	ac 01       	movw	r20, r24
    19ac:	69 81       	ldd	r22, Y+1	; 0x01
    19ae:	7a 81       	ldd	r23, Y+2	; 0x02
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
    19b8:	a6 01       	movw	r20, r12
    19ba:	95 01       	movw	r18, r10
    19bc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
};
    19c0:	28 96       	adiw	r28, 0x08	; 8
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	7f 90       	pop	r7
    19e2:	6f 90       	pop	r6
    19e4:	5f 90       	pop	r5
    19e6:	4f 90       	pop	r4
    19e8:	08 95       	ret

000019ea <_Znwj>:
    19ea:	0c 94 c5 11 	jmp	0x238a	; 0x238a <malloc>

000019ee <main>:
#include "RF24.h"
#include "UART.h"
#if DEVICE == 1 

int main(void)
{	
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	c0 54       	subi	r28, 0x40	; 64
    19f8:	d1 09       	sbc	r29, r1
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
	// --- Initilizations
	// mcu
	mcu.init();
    1a04:	87 ee       	ldi	r24, 0xE7	; 231
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	0e 94 9b 00 	call	0x136	; 0x136 <_ZN3MCU4initEv>
	// uart
	uart.Init(UART_BAUD_RATE);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	9b e4       	ldi	r25, 0x4B	; 75
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	be 01       	movw	r22, r28
    1a16:	6f 5f       	subi	r22, 0xFF	; 255
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	82 ee       	ldi	r24, 0xE2	; 226
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	0e 94 03 03 	call	0x606	; 0x606 <_ZN4UART4InitERKj>
	// radio transmitter
	RF24 radio(PIN_R_RF_CE,PIN_R_RF_CS);
    1a22:	4a e0       	ldi	r20, 0x0A	; 10
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	69 e0       	ldi	r22, 0x09	; 9
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN4RF24C1Ejj>
	uint8_t addresses[][6] = {"Smart", "Robot"};
    1a32:	8c e0       	ldi	r24, 0x0C	; 12
    1a34:	e6 e0       	ldi	r30, 0x06	; 6
    1a36:	f1 e0       	ldi	r31, 0x01	; 1
    1a38:	de 01       	movw	r26, r28
    1a3a:	59 96       	adiw	r26, 0x19	; 25
    1a3c:	01 90       	ld	r0, Z+
    1a3e:	0d 92       	st	X+, r0
    1a40:	8a 95       	dec	r24
    1a42:	e1 f7       	brne	.-8      	; 0x1a3c <main+0x4e>
	radio.begin();
    1a44:	ce 01       	movw	r24, r28
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	0e 94 6d 09 	call	0x12da	; 0x12da <_ZN4RF245beginEv>
	radio.openWritingPipe(addresses[1]);
    1a4c:	be 01       	movw	r22, r28
    1a4e:	61 5e       	subi	r22, 0xE1	; 225
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	ce 01       	movw	r24, r28
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN4RF2415openWritingPipeEPKh>
	radio.openReadingPipe(1, addresses[0]);
    1a5a:	ae 01       	movw	r20, r28
    1a5c:	47 5e       	subi	r20, 0xE7	; 231
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	0e 94 83 08 	call	0x1106	; 0x1106 <_ZN4RF2415openReadingPipeEhPKh>
	radio.startListening();
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN4RF2414startListeningEv>
	bool tx_buffer[1] = {true};
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	21 96       	adiw	r28, 0x01	; 1
    1a76:	8f af       	std	Y+63, r24	; 0x3f
    1a78:	21 97       	sbiw	r28, 0x01	; 1
	int8_t rx_buffer[2];
	// infrared sensors
	Infrared ir_left(PIN_R_IR_LEFT);
    1a7a:	80 e1       	ldi	r24, 0x10	; 16
    1a7c:	8d a3       	std	Y+37, r24	; 0x25
    1a7e:	be 01       	movw	r22, r28
    1a80:	6b 5d       	subi	r22, 0xDB	; 219
    1a82:	7f 4f       	sbci	r23, 0xFF	; 255
    1a84:	ce 01       	movw	r24, r28
    1a86:	ca 96       	adiw	r24, 0x3a	; 58
    1a88:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN8InfraredC1ERKh>
	Infrared ir_right(PIN_R_IR_RIGHT);
    1a8c:	8f e0       	ldi	r24, 0x0F	; 15
    1a8e:	8d a3       	std	Y+37, r24	; 0x25
    1a90:	be 01       	movw	r22, r28
    1a92:	6b 5d       	subi	r22, 0xDB	; 219
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	ce 01       	movw	r24, r28
    1a98:	c6 96       	adiw	r24, 0x36	; 54
    1a9a:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN8InfraredC1ERKh>
	Infrared ir_back(PIN_R_IR_BACK);
    1a9e:	8e e0       	ldi	r24, 0x0E	; 14
    1aa0:	8d a3       	std	Y+37, r24	; 0x25
    1aa2:	be 01       	movw	r22, r28
    1aa4:	6b 5d       	subi	r22, 0xDB	; 219
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	c2 96       	adiw	r24, 0x32	; 50
    1aac:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN8InfraredC1ERKh>
	// ultrasonic sensor
	Ultrasonic us(PIN_R_US_TRIG, PIN_R_US_ECHO);
    1ab0:	82 e1       	ldi	r24, 0x12	; 18
    1ab2:	8a a7       	std	Y+42, r24	; 0x2a
    1ab4:	83 e1       	ldi	r24, 0x13	; 19
    1ab6:	8e a7       	std	Y+46, r24	; 0x2e
    1ab8:	4e 01       	movw	r8, r28
    1aba:	2a e2       	ldi	r18, 0x2A	; 42
    1abc:	82 0e       	add	r8, r18
    1abe:	91 1c       	adc	r9, r1
    1ac0:	3e 01       	movw	r6, r28
    1ac2:	8e e2       	ldi	r24, 0x2E	; 46
    1ac4:	68 0e       	add	r6, r24
    1ac6:	71 1c       	adc	r7, r1
    1ac8:	a4 01       	movw	r20, r8
    1aca:	b3 01       	movw	r22, r6
    1acc:	ce 01       	movw	r24, r28
    1ace:	85 96       	adiw	r24, 0x25	; 37
    1ad0:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN10UltrasonicC1ERKhS1_>
	// motors
	Motor motors_left(PIN_R_M_CTRL_LEFT, PIN_R_M_FORWARD_LEFT, PIN_R_M_BACKWARD_LEFT);
    1ad4:	28 e0       	ldi	r18, 0x08	; 8
    1ad6:	47 e0       	ldi	r20, 0x07	; 7
    1ad8:	66 e0       	ldi	r22, 0x06	; 6
    1ada:	c3 01       	movw	r24, r6
    1adc:	0e 94 15 06 	call	0xc2a	; 0xc2a <_ZN5MotorC1Ehhh>
	Motor motors_right(PIN_R_M_CTRL_RIGHT, PIN_R_M_FORWARD_RIGHT, PIN_R_M_BACKWARD_RIGHT);
    1ae0:	24 e0       	ldi	r18, 0x04	; 4
    1ae2:	42 e0       	ldi	r20, 0x02	; 2
    1ae4:	65 e0       	ldi	r22, 0x05	; 5
    1ae6:	c4 01       	movw	r24, r8
    1ae8:	0e 94 15 06 	call	0xc2a	; 0xc2a <_ZN5MotorC1Ehhh>
	uint8_t motors_left_velocity, motors_right_velocity = 0;
	// servo
	servo.init();
    1aec:	81 ee       	ldi	r24, 0xE1	; 225
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN5Servo4initEv>
	servo.write(100);
    1af4:	64 e6       	ldi	r22, 0x64	; 100
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	81 ee       	ldi	r24, 0xE1	; 225
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0e 94 10 0a 	call	0x1420	; 0x1420 <_ZN5Servo5writeEi>
	// infrared sensors
	/*ir_left.enableKalman();
	ir_right.enableKalman();
	ir_back.enableKalman();*/
	// ultrasonic sensor
	us.enableKalman();
    1b00:	ce 01       	movw	r24, r28
    1b02:	85 96       	adiw	r24, 0x25	; 37
    1b04:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN10Ultrasonic12enableKalmanEv>
	// motors
	motors_left.setSpeed(0);
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	c3 01       	movw	r24, r6
    1b0c:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
	motors_right.setSpeed(0);
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	c4 01       	movw	r24, r8
    1b14:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
		//for (pos = 0; pos <= 120; pos ++) { servo.write(50+pos); _delay_ms(10); }
		//for (pos = 0; pos <= 120; pos ++) { servo.write(50+120-pos); _delay_ms(10); }
			//uart.Write(us.read()); uart.Write(","); uart.Write(us.read_raw()); uart.Write("\r\n");
	/// *** Wireless Duplex channel ***//
		// read distance sensors and transmit data is obstacle detected
		uart.Write(ir_back.read()); uart.Write("\r\n");
    1b18:	ce 01       	movw	r24, r28
    1b1a:	c2 96       	adiw	r24, 0x32	; 50
    1b1c:	0e 94 93 04 	call	0x926	; 0x926 <_ZN8Infrared4readEv>
    1b20:	bc 01       	movw	r22, r24
    1b22:	82 ee       	ldi	r24, 0xE2	; 226
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN4UART5WriteEj>
    1b2a:	62 e1       	ldi	r22, 0x12	; 18
    1b2c:	71 e0       	ldi	r23, 0x01	; 1
    1b2e:	82 ee       	ldi	r24, 0xE2	; 226
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
		obstacle_front = us.read() < 30; obstacle_left = ir_left.read() < 140; obstacle_right = ir_right.read() < 70; obstacle_back = ir_back.read() < 155;		
    1b36:	ce 01       	movw	r24, r28
    1b38:	85 96       	adiw	r24, 0x25	; 37
    1b3a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN10Ultrasonic4readEv>
    1b3e:	7c 01       	movw	r14, r24
    1b40:	ce 01       	movw	r24, r28
    1b42:	ca 96       	adiw	r24, 0x3a	; 58
    1b44:	0e 94 93 04 	call	0x926	; 0x926 <_ZN8Infrared4readEv>
    1b48:	ce 01       	movw	r24, r28
    1b4a:	c6 96       	adiw	r24, 0x36	; 54
    1b4c:	0e 94 93 04 	call	0x926	; 0x926 <_ZN8Infrared4readEv>
    1b50:	ce 01       	movw	r24, r28
    1b52:	c2 96       	adiw	r24, 0x32	; 50
    1b54:	0e 94 93 04 	call	0x926	; 0x926 <_ZN8Infrared4readEv>
		uart.Write("obstacle_front:"); uart.Write( us.read()); uart.Write("\r\n");
    1b58:	65 e1       	ldi	r22, 0x15	; 21
    1b5a:	71 e0       	ldi	r23, 0x01	; 1
    1b5c:	82 ee       	ldi	r24, 0xE2	; 226
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1b64:	ce 01       	movw	r24, r28
    1b66:	85 96       	adiw	r24, 0x25	; 37
    1b68:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN10Ultrasonic4readEv>
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	82 ee       	ldi	r24, 0xE2	; 226
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN4UART5WriteEj>
    1b76:	62 e1       	ldi	r22, 0x12	; 18
    1b78:	71 e0       	ldi	r23, 0x01	; 1
    1b7a:	82 ee       	ldi	r24, 0xE2	; 226
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
		if (obstacle_front ) { // || obstacle_left || obstacle_right || obstacle_back) {
    1b82:	9e e1       	ldi	r25, 0x1E	; 30
    1b84:	e9 16       	cp	r14, r25
    1b86:	f1 04       	cpc	r15, r1
    1b88:	10 f5       	brcc	.+68     	; 0x1bce <main+0x1e0>
			radio.stopListening();
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN4RF2413stopListeningEv>
			uart.Write("detected"); uart.Write("\r\n");
    1b92:	65 e2       	ldi	r22, 0x25	; 37
    1b94:	71 e0       	ldi	r23, 0x01	; 1
    1b96:	82 ee       	ldi	r24, 0xE2	; 226
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1b9e:	62 e1       	ldi	r22, 0x12	; 18
    1ba0:	71 e0       	ldi	r23, 0x01	; 1
    1ba2:	82 ee       	ldi	r24, 0xE2	; 226
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
			radio.write(&tx_buffer, sizeof(tx_buffer));
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	be 01       	movw	r22, r28
    1bae:	60 5c       	subi	r22, 0xC0	; 192
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	0e 94 38 08 	call	0x1070	; 0x1070 <_ZN4RF245writeEPKvh>
			radio.startListening();
    1bba:	ce 01       	movw	r24, r28
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN4RF2414startListeningEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bc2:	8f e3       	ldi	r24, 0x3F	; 63
    1bc4:	9c e9       	ldi	r25, 0x9C	; 156
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <main+0x1d8>
    1bca:	00 c0       	rjmp	.+0      	; 0x1bcc <main+0x1de>
    1bcc:	00 00       	nop
			_delay_ms(10);
		};
		// receive data from the robot if available
		if (radio.available()){
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN4RF249availableEv>
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <main+0x1ee>
    1bda:	9e cf       	rjmp	.-196    	; 0x1b18 <main+0x12a>
			radio.read(&rx_buffer, sizeof(rx_buffer));
    1bdc:	42 e0       	ldi	r20, 0x02	; 2
    1bde:	be 01       	movw	r22, r28
    1be0:	62 5c       	subi	r22, 0xC2	; 194
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	ce 01       	movw	r24, r28
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN4RF244readEPvh>
			if (rx_buffer[0] && rx_buffer[1]){
    1bec:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bee:	88 23       	and	r24, r24
    1bf0:	29 f1       	breq	.+74     	; 0x1c3c <main+0x24e>
    1bf2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1bf4:	88 23       	and	r24, r24
    1bf6:	11 f1       	breq	.+68     	; 0x1c3c <main+0x24e>
				uart.Write("rx_buffer[0]"); uart.Write(rx_buffer[0]);  uart.Write("\r\n");
    1bf8:	6e e2       	ldi	r22, 0x2E	; 46
    1bfa:	71 e0       	ldi	r23, 0x01	; 1
    1bfc:	82 ee       	ldi	r24, 0xE2	; 226
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1c04:	6e ad       	ldd	r22, Y+62	; 0x3e
    1c06:	82 ee       	ldi	r24, 0xE2	; 226
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN4UART5WriteEa>
    1c0e:	62 e1       	ldi	r22, 0x12	; 18
    1c10:	71 e0       	ldi	r23, 0x01	; 1
    1c12:	82 ee       	ldi	r24, 0xE2	; 226
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
				uart.Write("rx_buffer[1]"); uart.Write(rx_buffer[1]);  uart.Write("\r\n");
    1c1a:	6b e3       	ldi	r22, 0x3B	; 59
    1c1c:	71 e0       	ldi	r23, 0x01	; 1
    1c1e:	82 ee       	ldi	r24, 0xE2	; 226
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1c26:	6f ad       	ldd	r22, Y+63	; 0x3f
    1c28:	82 ee       	ldi	r24, 0xE2	; 226
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN4UART5WriteEa>
    1c30:	62 e1       	ldi	r22, 0x12	; 18
    1c32:	71 e0       	ldi	r23, 0x01	; 1
    1c34:	82 ee       	ldi	r24, 0xE2	; 226
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
			}
			if (rx_buffer[0] < -20){
    1c3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c3e:	8c 3e       	cpi	r24, 0xEC	; 236
    1c40:	0c f0       	brlt	.+2      	; 0x1c44 <main+0x256>
    1c42:	53 c0       	rjmp	.+166    	; 0x1cea <main+0x2fc>
				motors_left_velocity = (uint8_t)linear_mapping(rx_buffer[0], 20, 80, 0, MAX_VELOCITY);
    1c44:	68 2f       	mov	r22, r24
    1c46:	88 0f       	add	r24, r24
    1c48:	77 0b       	sbc	r23, r23
    1c4a:	88 0b       	sbc	r24, r24
    1c4c:	99 0b       	sbc	r25, r25
    1c4e:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1c52:	23 e4       	ldi	r18, 0x43	; 67
    1c54:	2f 93       	push	r18
    1c56:	2f e7       	ldi	r18, 0x7F	; 127
    1c58:	2f 93       	push	r18
    1c5a:	1f 92       	push	r1
    1c5c:	1f 92       	push	r1
    1c5e:	a1 2c       	mov	r10, r1
    1c60:	b1 2c       	mov	r11, r1
    1c62:	65 01       	movw	r12, r10
    1c64:	e1 2c       	mov	r14, r1
    1c66:	f1 2c       	mov	r15, r1
    1c68:	00 ea       	ldi	r16, 0xA0	; 160
    1c6a:	12 e4       	ldi	r17, 0x42	; 66
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 ea       	ldi	r20, 0xA0	; 160
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14linear_mappingfffff>
    1c78:	1b 01       	movw	r2, r22
    1c7a:	2c 01       	movw	r4, r24
				motors_right_velocity = (uint8_t)linear_mapping(rx_buffer[0], 20, 80, 0, MAX_VELOCITY);
    1c7c:	6e ad       	ldd	r22, Y+62	; 0x3e
    1c7e:	06 2e       	mov	r0, r22
    1c80:	00 0c       	add	r0, r0
    1c82:	77 0b       	sbc	r23, r23
    1c84:	88 0b       	sbc	r24, r24
    1c86:	99 0b       	sbc	r25, r25
    1c88:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1c8c:	23 e4       	ldi	r18, 0x43	; 67
    1c8e:	2f 93       	push	r18
    1c90:	2f e7       	ldi	r18, 0x7F	; 127
    1c92:	2f 93       	push	r18
    1c94:	1f 92       	push	r1
    1c96:	1f 92       	push	r1
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 ea       	ldi	r20, 0xA0	; 160
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14linear_mappingfffff>
    1ca4:	6b 01       	movw	r12, r22
    1ca6:	7c 01       	movw	r14, r24
				motors_left.setSpeed(motors_left_velocity); motors_right.setSpeed(motors_right_velocity);
    1ca8:	c2 01       	movw	r24, r4
    1caa:	b1 01       	movw	r22, r2
    1cac:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    1cb0:	c3 01       	movw	r24, r6
    1cb2:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	b6 01       	movw	r22, r12
    1cba:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    1cbe:	c4 01       	movw	r24, r8
    1cc0:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
				uart.Write("forward"); uart.Write("\r\n"); // left
    1cc4:	68 e4       	ldi	r22, 0x48	; 72
    1cc6:	71 e0       	ldi	r23, 0x01	; 1
    1cc8:	82 ee       	ldi	r24, 0xE2	; 226
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1cd0:	62 e1       	ldi	r22, 0x12	; 18
    1cd2:	71 e0       	ldi	r23, 0x01	; 1
    1cd4:	82 ee       	ldi	r24, 0xE2	; 226
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
    1cd8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
				motors_left.turnForward(); motors_right.turnForward();
    1cdc:	c3 01       	movw	r24, r6
    1cde:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Motor11turnForwardEv>
    1ce2:	c4 01       	movw	r24, r8
    1ce4:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Motor11turnForwardEv>
    1ce8:	55 c0       	rjmp	.+170    	; 0x1d94 <main+0x3a6>
			} else if (rx_buffer[0] > 20){
    1cea:	85 31       	cpi	r24, 0x15	; 21
    1cec:	0c f4       	brge	.+2      	; 0x1cf0 <main+0x302>
    1cee:	58 c0       	rjmp	.+176    	; 0x1da0 <main+0x3b2>
				motors_left_velocity = (uint8_t)linear_mapping(rx_buffer[0], -20, -80, 0, MAX_VELOCITY);
    1cf0:	68 2f       	mov	r22, r24
    1cf2:	88 0f       	add	r24, r24
    1cf4:	77 0b       	sbc	r23, r23
    1cf6:	88 0b       	sbc	r24, r24
    1cf8:	99 0b       	sbc	r25, r25
    1cfa:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1cfe:	23 e4       	ldi	r18, 0x43	; 67
    1d00:	2f 93       	push	r18
    1d02:	2f e7       	ldi	r18, 0x7F	; 127
    1d04:	2f 93       	push	r18
    1d06:	1f 92       	push	r1
    1d08:	1f 92       	push	r1
    1d0a:	a1 2c       	mov	r10, r1
    1d0c:	b1 2c       	mov	r11, r1
    1d0e:	65 01       	movw	r12, r10
    1d10:	e1 2c       	mov	r14, r1
    1d12:	f1 2c       	mov	r15, r1
    1d14:	00 ea       	ldi	r16, 0xA0	; 160
    1d16:	12 ec       	ldi	r17, 0xC2	; 194
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 ea       	ldi	r20, 0xA0	; 160
    1d1e:	51 ec       	ldi	r21, 0xC1	; 193
    1d20:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14linear_mappingfffff>
    1d24:	1b 01       	movw	r2, r22
    1d26:	2c 01       	movw	r4, r24
				motors_right_velocity = (uint8_t)linear_mapping(rx_buffer[0], -20, -80, 0, MAX_VELOCITY);
    1d28:	6e ad       	ldd	r22, Y+62	; 0x3e
    1d2a:	06 2e       	mov	r0, r22
    1d2c:	00 0c       	add	r0, r0
    1d2e:	77 0b       	sbc	r23, r23
    1d30:	88 0b       	sbc	r24, r24
    1d32:	99 0b       	sbc	r25, r25
    1d34:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1d38:	23 e4       	ldi	r18, 0x43	; 67
    1d3a:	2f 93       	push	r18
    1d3c:	2f e7       	ldi	r18, 0x7F	; 127
    1d3e:	2f 93       	push	r18
    1d40:	1f 92       	push	r1
    1d42:	1f 92       	push	r1
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 ea       	ldi	r20, 0xA0	; 160
    1d4a:	51 ec       	ldi	r21, 0xC1	; 193
    1d4c:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14linear_mappingfffff>
    1d50:	6b 01       	movw	r12, r22
    1d52:	7c 01       	movw	r14, r24
				motors_left.setSpeed(motors_left_velocity); motors_right.setSpeed(motors_right_velocity);
    1d54:	c2 01       	movw	r24, r4
    1d56:	b1 01       	movw	r22, r2
    1d58:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    1d5c:	c3 01       	movw	r24, r6
    1d5e:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
    1d62:	c7 01       	movw	r24, r14
    1d64:	b6 01       	movw	r22, r12
    1d66:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    1d6a:	c4 01       	movw	r24, r8
    1d6c:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
				motors_left.turnBackward(); motors_right.turnBackward();
    1d70:	c3 01       	movw	r24, r6
    1d72:	0e 94 4a 06 	call	0xc94	; 0xc94 <_ZN5Motor12turnBackwardEv>
    1d76:	c4 01       	movw	r24, r8
    1d78:	0e 94 4a 06 	call	0xc94	; 0xc94 <_ZN5Motor12turnBackwardEv>
				uart.Write("backward"); uart.Write("\r\n");
    1d7c:	60 e5       	ldi	r22, 0x50	; 80
    1d7e:	71 e0       	ldi	r23, 0x01	; 1
    1d80:	82 ee       	ldi	r24, 0xE2	; 226
    1d82:	91 e0       	ldi	r25, 0x01	; 1
    1d84:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1d88:	62 e1       	ldi	r22, 0x12	; 18
    1d8a:	71 e0       	ldi	r23, 0x01	; 1
    1d8c:	82 ee       	ldi	r24, 0xE2	; 226
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	bc ce       	rjmp	.-648    	; 0x1b18 <main+0x12a>
			} else if (rx_buffer[1] > 20){
    1da0:	6f ad       	ldd	r22, Y+63	; 0x3f
    1da2:	65 31       	cpi	r22, 0x15	; 21
    1da4:	64 f1       	brlt	.+88     	; 0x1dfe <main+0x410>
				motors_left_velocity = (uint8_t)linear_mapping(rx_buffer[1], -20, -80, 0, MAX_VELOCITY);
    1da6:	06 2e       	mov	r0, r22
    1da8:	00 0c       	add	r0, r0
    1daa:	77 0b       	sbc	r23, r23
    1dac:	88 0b       	sbc	r24, r24
    1dae:	99 0b       	sbc	r25, r25
    1db0:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1db4:	23 e4       	ldi	r18, 0x43	; 67
    1db6:	2f 93       	push	r18
    1db8:	2f e7       	ldi	r18, 0x7F	; 127
    1dba:	2f 93       	push	r18
    1dbc:	1f 92       	push	r1
    1dbe:	1f 92       	push	r1
    1dc0:	a1 2c       	mov	r10, r1
    1dc2:	b1 2c       	mov	r11, r1
    1dc4:	65 01       	movw	r12, r10
    1dc6:	e1 2c       	mov	r14, r1
    1dc8:	f1 2c       	mov	r15, r1
    1dca:	00 ea       	ldi	r16, 0xA0	; 160
    1dcc:	12 ec       	ldi	r17, 0xC2	; 194
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 ea       	ldi	r20, 0xA0	; 160
    1dd4:	51 ec       	ldi	r21, 0xC1	; 193
    1dd6:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14linear_mappingfffff>
				motors_right_velocity = 0;
				motors_left.setSpeed(motors_left_velocity); motors_right.setSpeed(motors_right_velocity);
    1dda:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    1dde:	c3 01       	movw	r24, r6
    1de0:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	c4 01       	movw	r24, r8
    1de8:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
				motors_left.turnForward(); motors_right.turnForward();
    1dec:	c3 01       	movw	r24, r6
    1dee:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Motor11turnForwardEv>
    1df2:	c4 01       	movw	r24, r8
    1df4:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Motor11turnForwardEv>
				uart.Write("right"); uart.Write("\r\n");
    1df8:	69 e5       	ldi	r22, 0x59	; 89
    1dfa:	71 e0       	ldi	r23, 0x01	; 1
    1dfc:	31 c0       	rjmp	.+98     	; 0x1e60 <main+0x472>
			} else if (rx_buffer[1] < -20){
    1dfe:	6c 3e       	cpi	r22, 0xEC	; 236
    1e00:	f4 f5       	brge	.+124    	; 0x1e7e <main+0x490>
				motors_left_velocity = 0;
				motors_right_velocity = (uint8_t)linear_mapping(rx_buffer[1], -20, -80, 0, MAX_VELOCITY);
    1e02:	06 2e       	mov	r0, r22
    1e04:	00 0c       	add	r0, r0
    1e06:	77 0b       	sbc	r23, r23
    1e08:	88 0b       	sbc	r24, r24
    1e0a:	99 0b       	sbc	r25, r25
    1e0c:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1e10:	23 e4       	ldi	r18, 0x43	; 67
    1e12:	2f 93       	push	r18
    1e14:	2f e7       	ldi	r18, 0x7F	; 127
    1e16:	2f 93       	push	r18
    1e18:	1f 92       	push	r1
    1e1a:	1f 92       	push	r1
    1e1c:	a1 2c       	mov	r10, r1
    1e1e:	b1 2c       	mov	r11, r1
    1e20:	65 01       	movw	r12, r10
    1e22:	e1 2c       	mov	r14, r1
    1e24:	f1 2c       	mov	r15, r1
    1e26:	00 ea       	ldi	r16, 0xA0	; 160
    1e28:	12 ec       	ldi	r17, 0xC2	; 194
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 ea       	ldi	r20, 0xA0	; 160
    1e30:	51 ec       	ldi	r21, 0xC1	; 193
    1e32:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z14linear_mappingfffff>
    1e36:	6b 01       	movw	r12, r22
    1e38:	7c 01       	movw	r14, r24
				motors_left.setSpeed(motors_left_velocity); motors_right.setSpeed(motors_right_velocity);
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	c3 01       	movw	r24, r6
    1e3e:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
    1e42:	c7 01       	movw	r24, r14
    1e44:	b6 01       	movw	r22, r12
    1e46:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    1e4a:	c4 01       	movw	r24, r8
    1e4c:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
				motors_left.turnForward(); motors_right.turnForward();
    1e50:	c3 01       	movw	r24, r6
    1e52:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Motor11turnForwardEv>
    1e56:	c4 01       	movw	r24, r8
    1e58:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Motor11turnForwardEv>
				uart.Write("left"); uart.Write("\r\n");
    1e5c:	6f e5       	ldi	r22, 0x5F	; 95
    1e5e:	71 e0       	ldi	r23, 0x01	; 1
    1e60:	82 ee       	ldi	r24, 0xE2	; 226
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1e68:	62 e1       	ldi	r22, 0x12	; 18
    1e6a:	71 e0       	ldi	r23, 0x01	; 1
    1e6c:	82 ee       	ldi	r24, 0xE2	; 226
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN4UART5WriteEPKc>
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	4d ce       	rjmp	.-870    	; 0x1b18 <main+0x12a>
			} else if ( rx_buffer[0] != 0 && rx_buffer[1] != 0) {
    1e7e:	88 23       	and	r24, r24
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <main+0x496>
    1e82:	4a ce       	rjmp	.-876    	; 0x1b18 <main+0x12a>
    1e84:	66 23       	and	r22, r22
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <main+0x49c>
    1e88:	47 ce       	rjmp	.-882    	; 0x1b18 <main+0x12a>
				motors_left_velocity = 0;
				motors_right_velocity = 0;
				motors_left.setSpeed(motors_left_velocity); motors_right.setSpeed(motors_right_velocity);
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	c3 01       	movw	r24, r6
    1e8e:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN5Motor8setSpeedEh>
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	c4 01       	movw	r24, r8
    1e96:	3e ce       	rjmp	.-900    	; 0x1b14 <main+0x126>

00001e98 <_GLOBAL__sub_I_main>:
    1e98:	87 ee       	ldi	r24, 0xE7	; 231
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	0e 94 99 00 	call	0x132	; 0x132 <_ZN3MCUC1Ev>
    1ea0:	82 ee       	ldi	r24, 0xE2	; 226
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	0e 94 01 03 	call	0x602	; 0x602 <_ZN4UARTC1Ev>
	protected:
	private:
};

#if DEVICE == 1
static Servo servo(PIN_R_SRV); 
    1ea8:	63 e0       	ldi	r22, 0x03	; 3
    1eaa:	81 ee       	ldi	r24, 0xE1	; 225
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <_ZN5ServoC1Eh>

00001eb2 <_GLOBAL__sub_D_main>:
    1eb2:	81 ee       	ldi	r24, 0xE1	; 225
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_ZN5ServoD1Ev>
    1eba:	82 ee       	ldi	r24, 0xE2	; 226
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	0e 94 02 03 	call	0x604	; 0x604 <_ZN4UARTD1Ev>
    1ec2:	87 ee       	ldi	r24, 0xE7	; 231
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	0c 94 9a 00 	jmp	0x134	; 0x134 <_ZN3MCUD1Ev>

00001eca <__udivmodhi4>:
    1eca:	aa 1b       	sub	r26, r26
    1ecc:	bb 1b       	sub	r27, r27
    1ece:	51 e1       	ldi	r21, 0x11	; 17
    1ed0:	07 c0       	rjmp	.+14     	; 0x1ee0 <__udivmodhi4_ep>

00001ed2 <__udivmodhi4_loop>:
    1ed2:	aa 1f       	adc	r26, r26
    1ed4:	bb 1f       	adc	r27, r27
    1ed6:	a6 17       	cp	r26, r22
    1ed8:	b7 07       	cpc	r27, r23
    1eda:	10 f0       	brcs	.+4      	; 0x1ee0 <__udivmodhi4_ep>
    1edc:	a6 1b       	sub	r26, r22
    1ede:	b7 0b       	sbc	r27, r23

00001ee0 <__udivmodhi4_ep>:
    1ee0:	88 1f       	adc	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	5a 95       	dec	r21
    1ee6:	a9 f7       	brne	.-22     	; 0x1ed2 <__udivmodhi4_loop>
    1ee8:	80 95       	com	r24
    1eea:	90 95       	com	r25
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	08 95       	ret

00001ef2 <__divmodhi4>:
    1ef2:	97 fb       	bst	r25, 7
    1ef4:	07 2e       	mov	r0, r23
    1ef6:	16 f4       	brtc	.+4      	; 0x1efc <__divmodhi4+0xa>
    1ef8:	00 94       	com	r0
    1efa:	07 d0       	rcall	.+14     	; 0x1f0a <__divmodhi4_neg1>
    1efc:	77 fd       	sbrc	r23, 7
    1efe:	09 d0       	rcall	.+18     	; 0x1f12 <__divmodhi4_neg2>
    1f00:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__udivmodhi4>
    1f04:	07 fc       	sbrc	r0, 7
    1f06:	05 d0       	rcall	.+10     	; 0x1f12 <__divmodhi4_neg2>
    1f08:	3e f4       	brtc	.+14     	; 0x1f18 <__divmodhi4_exit>

00001f0a <__divmodhi4_neg1>:
    1f0a:	90 95       	com	r25
    1f0c:	81 95       	neg	r24
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	08 95       	ret

00001f12 <__divmodhi4_neg2>:
    1f12:	70 95       	com	r23
    1f14:	61 95       	neg	r22
    1f16:	7f 4f       	sbci	r23, 0xFF	; 255

00001f18 <__divmodhi4_exit>:
    1f18:	08 95       	ret

00001f1a <__udivmodsi4>:
    1f1a:	a1 e2       	ldi	r26, 0x21	; 33
    1f1c:	1a 2e       	mov	r1, r26
    1f1e:	aa 1b       	sub	r26, r26
    1f20:	bb 1b       	sub	r27, r27
    1f22:	fd 01       	movw	r30, r26
    1f24:	0d c0       	rjmp	.+26     	; 0x1f40 <__udivmodsi4_ep>

00001f26 <__udivmodsi4_loop>:
    1f26:	aa 1f       	adc	r26, r26
    1f28:	bb 1f       	adc	r27, r27
    1f2a:	ee 1f       	adc	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	a2 17       	cp	r26, r18
    1f30:	b3 07       	cpc	r27, r19
    1f32:	e4 07       	cpc	r30, r20
    1f34:	f5 07       	cpc	r31, r21
    1f36:	20 f0       	brcs	.+8      	; 0x1f40 <__udivmodsi4_ep>
    1f38:	a2 1b       	sub	r26, r18
    1f3a:	b3 0b       	sbc	r27, r19
    1f3c:	e4 0b       	sbc	r30, r20
    1f3e:	f5 0b       	sbc	r31, r21

00001f40 <__udivmodsi4_ep>:
    1f40:	66 1f       	adc	r22, r22
    1f42:	77 1f       	adc	r23, r23
    1f44:	88 1f       	adc	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	1a 94       	dec	r1
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <__udivmodsi4_loop>
    1f4c:	60 95       	com	r22
    1f4e:	70 95       	com	r23
    1f50:	80 95       	com	r24
    1f52:	90 95       	com	r25
    1f54:	9b 01       	movw	r18, r22
    1f56:	ac 01       	movw	r20, r24
    1f58:	bd 01       	movw	r22, r26
    1f5a:	cf 01       	movw	r24, r30
    1f5c:	08 95       	ret

00001f5e <__tablejump2__>:
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	05 90       	lpm	r0, Z+
    1f64:	f4 91       	lpm	r31, Z
    1f66:	e0 2d       	mov	r30, r0
    1f68:	09 94       	ijmp

00001f6a <__subsf3>:
    1f6a:	50 58       	subi	r21, 0x80	; 128

00001f6c <__addsf3>:
    1f6c:	bb 27       	eor	r27, r27
    1f6e:	aa 27       	eor	r26, r26
    1f70:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__addsf3x>
    1f74:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__fp_round>
    1f78:	0e 94 10 11 	call	0x2220	; 0x2220 <__fp_pscA>
    1f7c:	38 f0       	brcs	.+14     	; 0x1f8c <__addsf3+0x20>
    1f7e:	0e 94 17 11 	call	0x222e	; 0x222e <__fp_pscB>
    1f82:	20 f0       	brcs	.+8      	; 0x1f8c <__addsf3+0x20>
    1f84:	39 f4       	brne	.+14     	; 0x1f94 <__addsf3+0x28>
    1f86:	9f 3f       	cpi	r25, 0xFF	; 255
    1f88:	19 f4       	brne	.+6      	; 0x1f90 <__addsf3+0x24>
    1f8a:	26 f4       	brtc	.+8      	; 0x1f94 <__addsf3+0x28>
    1f8c:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__fp_nan>
    1f90:	0e f4       	brtc	.+2      	; 0x1f94 <__addsf3+0x28>
    1f92:	e0 95       	com	r30
    1f94:	e7 fb       	bst	r30, 7
    1f96:	0c 94 07 11 	jmp	0x220e	; 0x220e <__fp_inf>

00001f9a <__addsf3x>:
    1f9a:	e9 2f       	mov	r30, r25
    1f9c:	0e 94 2f 11 	call	0x225e	; 0x225e <__fp_split3>
    1fa0:	58 f3       	brcs	.-42     	; 0x1f78 <__addsf3+0xc>
    1fa2:	ba 17       	cp	r27, r26
    1fa4:	62 07       	cpc	r22, r18
    1fa6:	73 07       	cpc	r23, r19
    1fa8:	84 07       	cpc	r24, r20
    1faa:	95 07       	cpc	r25, r21
    1fac:	20 f0       	brcs	.+8      	; 0x1fb6 <__addsf3x+0x1c>
    1fae:	79 f4       	brne	.+30     	; 0x1fce <__addsf3x+0x34>
    1fb0:	a6 f5       	brtc	.+104    	; 0x201a <__addsf3x+0x80>
    1fb2:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_zero>
    1fb6:	0e f4       	brtc	.+2      	; 0x1fba <__addsf3x+0x20>
    1fb8:	e0 95       	com	r30
    1fba:	0b 2e       	mov	r0, r27
    1fbc:	ba 2f       	mov	r27, r26
    1fbe:	a0 2d       	mov	r26, r0
    1fc0:	0b 01       	movw	r0, r22
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	90 01       	movw	r18, r0
    1fc6:	0c 01       	movw	r0, r24
    1fc8:	ca 01       	movw	r24, r20
    1fca:	a0 01       	movw	r20, r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	ff 27       	eor	r31, r31
    1fd0:	59 1b       	sub	r21, r25
    1fd2:	99 f0       	breq	.+38     	; 0x1ffa <__addsf3x+0x60>
    1fd4:	59 3f       	cpi	r21, 0xF9	; 249
    1fd6:	50 f4       	brcc	.+20     	; 0x1fec <__addsf3x+0x52>
    1fd8:	50 3e       	cpi	r21, 0xE0	; 224
    1fda:	68 f1       	brcs	.+90     	; 0x2036 <__addsf3x+0x9c>
    1fdc:	1a 16       	cp	r1, r26
    1fde:	f0 40       	sbci	r31, 0x00	; 0
    1fe0:	a2 2f       	mov	r26, r18
    1fe2:	23 2f       	mov	r18, r19
    1fe4:	34 2f       	mov	r19, r20
    1fe6:	44 27       	eor	r20, r20
    1fe8:	58 5f       	subi	r21, 0xF8	; 248
    1fea:	f3 cf       	rjmp	.-26     	; 0x1fd2 <__addsf3x+0x38>
    1fec:	46 95       	lsr	r20
    1fee:	37 95       	ror	r19
    1ff0:	27 95       	ror	r18
    1ff2:	a7 95       	ror	r26
    1ff4:	f0 40       	sbci	r31, 0x00	; 0
    1ff6:	53 95       	inc	r21
    1ff8:	c9 f7       	brne	.-14     	; 0x1fec <__addsf3x+0x52>
    1ffa:	7e f4       	brtc	.+30     	; 0x201a <__addsf3x+0x80>
    1ffc:	1f 16       	cp	r1, r31
    1ffe:	ba 0b       	sbc	r27, r26
    2000:	62 0b       	sbc	r22, r18
    2002:	73 0b       	sbc	r23, r19
    2004:	84 0b       	sbc	r24, r20
    2006:	ba f0       	brmi	.+46     	; 0x2036 <__addsf3x+0x9c>
    2008:	91 50       	subi	r25, 0x01	; 1
    200a:	a1 f0       	breq	.+40     	; 0x2034 <__addsf3x+0x9a>
    200c:	ff 0f       	add	r31, r31
    200e:	bb 1f       	adc	r27, r27
    2010:	66 1f       	adc	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	c2 f7       	brpl	.-16     	; 0x2008 <__addsf3x+0x6e>
    2018:	0e c0       	rjmp	.+28     	; 0x2036 <__addsf3x+0x9c>
    201a:	ba 0f       	add	r27, r26
    201c:	62 1f       	adc	r22, r18
    201e:	73 1f       	adc	r23, r19
    2020:	84 1f       	adc	r24, r20
    2022:	48 f4       	brcc	.+18     	; 0x2036 <__addsf3x+0x9c>
    2024:	87 95       	ror	r24
    2026:	77 95       	ror	r23
    2028:	67 95       	ror	r22
    202a:	b7 95       	ror	r27
    202c:	f7 95       	ror	r31
    202e:	9e 3f       	cpi	r25, 0xFE	; 254
    2030:	08 f0       	brcs	.+2      	; 0x2034 <__addsf3x+0x9a>
    2032:	b0 cf       	rjmp	.-160    	; 0x1f94 <__addsf3+0x28>
    2034:	93 95       	inc	r25
    2036:	88 0f       	add	r24, r24
    2038:	08 f0       	brcs	.+2      	; 0x203c <__addsf3x+0xa2>
    203a:	99 27       	eor	r25, r25
    203c:	ee 0f       	add	r30, r30
    203e:	97 95       	ror	r25
    2040:	87 95       	ror	r24
    2042:	08 95       	ret

00002044 <__divsf3>:
    2044:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3x>
    2048:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__fp_round>
    204c:	0e 94 17 11 	call	0x222e	; 0x222e <__fp_pscB>
    2050:	58 f0       	brcs	.+22     	; 0x2068 <__divsf3+0x24>
    2052:	0e 94 10 11 	call	0x2220	; 0x2220 <__fp_pscA>
    2056:	40 f0       	brcs	.+16     	; 0x2068 <__divsf3+0x24>
    2058:	29 f4       	brne	.+10     	; 0x2064 <__divsf3+0x20>
    205a:	5f 3f       	cpi	r21, 0xFF	; 255
    205c:	29 f0       	breq	.+10     	; 0x2068 <__divsf3+0x24>
    205e:	0c 94 07 11 	jmp	0x220e	; 0x220e <__fp_inf>
    2062:	51 11       	cpse	r21, r1
    2064:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__fp_szero>
    2068:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__fp_nan>

0000206c <__divsf3x>:
    206c:	0e 94 2f 11 	call	0x225e	; 0x225e <__fp_split3>
    2070:	68 f3       	brcs	.-38     	; 0x204c <__divsf3+0x8>

00002072 <__divsf3_pse>:
    2072:	99 23       	and	r25, r25
    2074:	b1 f3       	breq	.-20     	; 0x2062 <__divsf3+0x1e>
    2076:	55 23       	and	r21, r21
    2078:	91 f3       	breq	.-28     	; 0x205e <__divsf3+0x1a>
    207a:	95 1b       	sub	r25, r21
    207c:	55 0b       	sbc	r21, r21
    207e:	bb 27       	eor	r27, r27
    2080:	aa 27       	eor	r26, r26
    2082:	62 17       	cp	r22, r18
    2084:	73 07       	cpc	r23, r19
    2086:	84 07       	cpc	r24, r20
    2088:	38 f0       	brcs	.+14     	; 0x2098 <__divsf3_pse+0x26>
    208a:	9f 5f       	subi	r25, 0xFF	; 255
    208c:	5f 4f       	sbci	r21, 0xFF	; 255
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	44 1f       	adc	r20, r20
    2094:	aa 1f       	adc	r26, r26
    2096:	a9 f3       	breq	.-22     	; 0x2082 <__divsf3_pse+0x10>
    2098:	35 d0       	rcall	.+106    	; 0x2104 <__divsf3_pse+0x92>
    209a:	0e 2e       	mov	r0, r30
    209c:	3a f0       	brmi	.+14     	; 0x20ac <__divsf3_pse+0x3a>
    209e:	e0 e8       	ldi	r30, 0x80	; 128
    20a0:	32 d0       	rcall	.+100    	; 0x2106 <__divsf3_pse+0x94>
    20a2:	91 50       	subi	r25, 0x01	; 1
    20a4:	50 40       	sbci	r21, 0x00	; 0
    20a6:	e6 95       	lsr	r30
    20a8:	00 1c       	adc	r0, r0
    20aa:	ca f7       	brpl	.-14     	; 0x209e <__divsf3_pse+0x2c>
    20ac:	2b d0       	rcall	.+86     	; 0x2104 <__divsf3_pse+0x92>
    20ae:	fe 2f       	mov	r31, r30
    20b0:	29 d0       	rcall	.+82     	; 0x2104 <__divsf3_pse+0x92>
    20b2:	66 0f       	add	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	bb 1f       	adc	r27, r27
    20ba:	26 17       	cp	r18, r22
    20bc:	37 07       	cpc	r19, r23
    20be:	48 07       	cpc	r20, r24
    20c0:	ab 07       	cpc	r26, r27
    20c2:	b0 e8       	ldi	r27, 0x80	; 128
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <__divsf3_pse+0x56>
    20c6:	bb 0b       	sbc	r27, r27
    20c8:	80 2d       	mov	r24, r0
    20ca:	bf 01       	movw	r22, r30
    20cc:	ff 27       	eor	r31, r31
    20ce:	93 58       	subi	r25, 0x83	; 131
    20d0:	5f 4f       	sbci	r21, 0xFF	; 255
    20d2:	3a f0       	brmi	.+14     	; 0x20e2 <__divsf3_pse+0x70>
    20d4:	9e 3f       	cpi	r25, 0xFE	; 254
    20d6:	51 05       	cpc	r21, r1
    20d8:	78 f0       	brcs	.+30     	; 0x20f8 <__divsf3_pse+0x86>
    20da:	0c 94 07 11 	jmp	0x220e	; 0x220e <__fp_inf>
    20de:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__fp_szero>
    20e2:	5f 3f       	cpi	r21, 0xFF	; 255
    20e4:	e4 f3       	brlt	.-8      	; 0x20de <__divsf3_pse+0x6c>
    20e6:	98 3e       	cpi	r25, 0xE8	; 232
    20e8:	d4 f3       	brlt	.-12     	; 0x20de <__divsf3_pse+0x6c>
    20ea:	86 95       	lsr	r24
    20ec:	77 95       	ror	r23
    20ee:	67 95       	ror	r22
    20f0:	b7 95       	ror	r27
    20f2:	f7 95       	ror	r31
    20f4:	9f 5f       	subi	r25, 0xFF	; 255
    20f6:	c9 f7       	brne	.-14     	; 0x20ea <__divsf3_pse+0x78>
    20f8:	88 0f       	add	r24, r24
    20fa:	91 1d       	adc	r25, r1
    20fc:	96 95       	lsr	r25
    20fe:	87 95       	ror	r24
    2100:	97 f9       	bld	r25, 7
    2102:	08 95       	ret
    2104:	e1 e0       	ldi	r30, 0x01	; 1
    2106:	66 0f       	add	r22, r22
    2108:	77 1f       	adc	r23, r23
    210a:	88 1f       	adc	r24, r24
    210c:	bb 1f       	adc	r27, r27
    210e:	62 17       	cp	r22, r18
    2110:	73 07       	cpc	r23, r19
    2112:	84 07       	cpc	r24, r20
    2114:	ba 07       	cpc	r27, r26
    2116:	20 f0       	brcs	.+8      	; 0x2120 <__divsf3_pse+0xae>
    2118:	62 1b       	sub	r22, r18
    211a:	73 0b       	sbc	r23, r19
    211c:	84 0b       	sbc	r24, r20
    211e:	ba 0b       	sbc	r27, r26
    2120:	ee 1f       	adc	r30, r30
    2122:	88 f7       	brcc	.-30     	; 0x2106 <__divsf3_pse+0x94>
    2124:	e0 95       	com	r30
    2126:	08 95       	ret

00002128 <__fixsfsi>:
    2128:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    212c:	68 94       	set
    212e:	b1 11       	cpse	r27, r1
    2130:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__fp_szero>
    2134:	08 95       	ret

00002136 <__fixunssfsi>:
    2136:	0e 94 37 11 	call	0x226e	; 0x226e <__fp_splitA>
    213a:	88 f0       	brcs	.+34     	; 0x215e <__fixunssfsi+0x28>
    213c:	9f 57       	subi	r25, 0x7F	; 127
    213e:	98 f0       	brcs	.+38     	; 0x2166 <__fixunssfsi+0x30>
    2140:	b9 2f       	mov	r27, r25
    2142:	99 27       	eor	r25, r25
    2144:	b7 51       	subi	r27, 0x17	; 23
    2146:	b0 f0       	brcs	.+44     	; 0x2174 <__fixunssfsi+0x3e>
    2148:	e1 f0       	breq	.+56     	; 0x2182 <__fixunssfsi+0x4c>
    214a:	66 0f       	add	r22, r22
    214c:	77 1f       	adc	r23, r23
    214e:	88 1f       	adc	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	1a f0       	brmi	.+6      	; 0x215a <__fixunssfsi+0x24>
    2154:	ba 95       	dec	r27
    2156:	c9 f7       	brne	.-14     	; 0x214a <__fixunssfsi+0x14>
    2158:	14 c0       	rjmp	.+40     	; 0x2182 <__fixunssfsi+0x4c>
    215a:	b1 30       	cpi	r27, 0x01	; 1
    215c:	91 f0       	breq	.+36     	; 0x2182 <__fixunssfsi+0x4c>
    215e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__fp_zero>
    2162:	b1 e0       	ldi	r27, 0x01	; 1
    2164:	08 95       	ret
    2166:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_zero>
    216a:	67 2f       	mov	r22, r23
    216c:	78 2f       	mov	r23, r24
    216e:	88 27       	eor	r24, r24
    2170:	b8 5f       	subi	r27, 0xF8	; 248
    2172:	39 f0       	breq	.+14     	; 0x2182 <__fixunssfsi+0x4c>
    2174:	b9 3f       	cpi	r27, 0xF9	; 249
    2176:	cc f3       	brlt	.-14     	; 0x216a <__fixunssfsi+0x34>
    2178:	86 95       	lsr	r24
    217a:	77 95       	ror	r23
    217c:	67 95       	ror	r22
    217e:	b3 95       	inc	r27
    2180:	d9 f7       	brne	.-10     	; 0x2178 <__fixunssfsi+0x42>
    2182:	3e f4       	brtc	.+14     	; 0x2192 <__fixunssfsi+0x5c>
    2184:	90 95       	com	r25
    2186:	80 95       	com	r24
    2188:	70 95       	com	r23
    218a:	61 95       	neg	r22
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	8f 4f       	sbci	r24, 0xFF	; 255
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
    2192:	08 95       	ret

00002194 <__floatunsisf>:
    2194:	e8 94       	clt
    2196:	09 c0       	rjmp	.+18     	; 0x21aa <__floatsisf+0x12>

00002198 <__floatsisf>:
    2198:	97 fb       	bst	r25, 7
    219a:	3e f4       	brtc	.+14     	; 0x21aa <__floatsisf+0x12>
    219c:	90 95       	com	r25
    219e:	80 95       	com	r24
    21a0:	70 95       	com	r23
    21a2:	61 95       	neg	r22
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	8f 4f       	sbci	r24, 0xFF	; 255
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	99 23       	and	r25, r25
    21ac:	a9 f0       	breq	.+42     	; 0x21d8 <__floatsisf+0x40>
    21ae:	f9 2f       	mov	r31, r25
    21b0:	96 e9       	ldi	r25, 0x96	; 150
    21b2:	bb 27       	eor	r27, r27
    21b4:	93 95       	inc	r25
    21b6:	f6 95       	lsr	r31
    21b8:	87 95       	ror	r24
    21ba:	77 95       	ror	r23
    21bc:	67 95       	ror	r22
    21be:	b7 95       	ror	r27
    21c0:	f1 11       	cpse	r31, r1
    21c2:	f8 cf       	rjmp	.-16     	; 0x21b4 <__floatsisf+0x1c>
    21c4:	fa f4       	brpl	.+62     	; 0x2204 <__floatsisf+0x6c>
    21c6:	bb 0f       	add	r27, r27
    21c8:	11 f4       	brne	.+4      	; 0x21ce <__floatsisf+0x36>
    21ca:	60 ff       	sbrs	r22, 0
    21cc:	1b c0       	rjmp	.+54     	; 0x2204 <__floatsisf+0x6c>
    21ce:	6f 5f       	subi	r22, 0xFF	; 255
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	8f 4f       	sbci	r24, 0xFF	; 255
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	16 c0       	rjmp	.+44     	; 0x2204 <__floatsisf+0x6c>
    21d8:	88 23       	and	r24, r24
    21da:	11 f0       	breq	.+4      	; 0x21e0 <__floatsisf+0x48>
    21dc:	96 e9       	ldi	r25, 0x96	; 150
    21de:	11 c0       	rjmp	.+34     	; 0x2202 <__floatsisf+0x6a>
    21e0:	77 23       	and	r23, r23
    21e2:	21 f0       	breq	.+8      	; 0x21ec <__floatsisf+0x54>
    21e4:	9e e8       	ldi	r25, 0x8E	; 142
    21e6:	87 2f       	mov	r24, r23
    21e8:	76 2f       	mov	r23, r22
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <__floatsisf+0x5e>
    21ec:	66 23       	and	r22, r22
    21ee:	71 f0       	breq	.+28     	; 0x220c <__floatsisf+0x74>
    21f0:	96 e8       	ldi	r25, 0x86	; 134
    21f2:	86 2f       	mov	r24, r22
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	2a f0       	brmi	.+10     	; 0x2204 <__floatsisf+0x6c>
    21fa:	9a 95       	dec	r25
    21fc:	66 0f       	add	r22, r22
    21fe:	77 1f       	adc	r23, r23
    2200:	88 1f       	adc	r24, r24
    2202:	da f7       	brpl	.-10     	; 0x21fa <__floatsisf+0x62>
    2204:	88 0f       	add	r24, r24
    2206:	96 95       	lsr	r25
    2208:	87 95       	ror	r24
    220a:	97 f9       	bld	r25, 7
    220c:	08 95       	ret

0000220e <__fp_inf>:
    220e:	97 f9       	bld	r25, 7
    2210:	9f 67       	ori	r25, 0x7F	; 127
    2212:	80 e8       	ldi	r24, 0x80	; 128
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	08 95       	ret

0000221a <__fp_nan>:
    221a:	9f ef       	ldi	r25, 0xFF	; 255
    221c:	80 ec       	ldi	r24, 0xC0	; 192
    221e:	08 95       	ret

00002220 <__fp_pscA>:
    2220:	00 24       	eor	r0, r0
    2222:	0a 94       	dec	r0
    2224:	16 16       	cp	r1, r22
    2226:	17 06       	cpc	r1, r23
    2228:	18 06       	cpc	r1, r24
    222a:	09 06       	cpc	r0, r25
    222c:	08 95       	ret

0000222e <__fp_pscB>:
    222e:	00 24       	eor	r0, r0
    2230:	0a 94       	dec	r0
    2232:	12 16       	cp	r1, r18
    2234:	13 06       	cpc	r1, r19
    2236:	14 06       	cpc	r1, r20
    2238:	05 06       	cpc	r0, r21
    223a:	08 95       	ret

0000223c <__fp_round>:
    223c:	09 2e       	mov	r0, r25
    223e:	03 94       	inc	r0
    2240:	00 0c       	add	r0, r0
    2242:	11 f4       	brne	.+4      	; 0x2248 <__fp_round+0xc>
    2244:	88 23       	and	r24, r24
    2246:	52 f0       	brmi	.+20     	; 0x225c <__fp_round+0x20>
    2248:	bb 0f       	add	r27, r27
    224a:	40 f4       	brcc	.+16     	; 0x225c <__fp_round+0x20>
    224c:	bf 2b       	or	r27, r31
    224e:	11 f4       	brne	.+4      	; 0x2254 <__fp_round+0x18>
    2250:	60 ff       	sbrs	r22, 0
    2252:	04 c0       	rjmp	.+8      	; 0x225c <__fp_round+0x20>
    2254:	6f 5f       	subi	r22, 0xFF	; 255
    2256:	7f 4f       	sbci	r23, 0xFF	; 255
    2258:	8f 4f       	sbci	r24, 0xFF	; 255
    225a:	9f 4f       	sbci	r25, 0xFF	; 255
    225c:	08 95       	ret

0000225e <__fp_split3>:
    225e:	57 fd       	sbrc	r21, 7
    2260:	90 58       	subi	r25, 0x80	; 128
    2262:	44 0f       	add	r20, r20
    2264:	55 1f       	adc	r21, r21
    2266:	59 f0       	breq	.+22     	; 0x227e <__fp_splitA+0x10>
    2268:	5f 3f       	cpi	r21, 0xFF	; 255
    226a:	71 f0       	breq	.+28     	; 0x2288 <__fp_splitA+0x1a>
    226c:	47 95       	ror	r20

0000226e <__fp_splitA>:
    226e:	88 0f       	add	r24, r24
    2270:	97 fb       	bst	r25, 7
    2272:	99 1f       	adc	r25, r25
    2274:	61 f0       	breq	.+24     	; 0x228e <__fp_splitA+0x20>
    2276:	9f 3f       	cpi	r25, 0xFF	; 255
    2278:	79 f0       	breq	.+30     	; 0x2298 <__fp_splitA+0x2a>
    227a:	87 95       	ror	r24
    227c:	08 95       	ret
    227e:	12 16       	cp	r1, r18
    2280:	13 06       	cpc	r1, r19
    2282:	14 06       	cpc	r1, r20
    2284:	55 1f       	adc	r21, r21
    2286:	f2 cf       	rjmp	.-28     	; 0x226c <__fp_split3+0xe>
    2288:	46 95       	lsr	r20
    228a:	f1 df       	rcall	.-30     	; 0x226e <__fp_splitA>
    228c:	08 c0       	rjmp	.+16     	; 0x229e <__fp_splitA+0x30>
    228e:	16 16       	cp	r1, r22
    2290:	17 06       	cpc	r1, r23
    2292:	18 06       	cpc	r1, r24
    2294:	99 1f       	adc	r25, r25
    2296:	f1 cf       	rjmp	.-30     	; 0x227a <__fp_splitA+0xc>
    2298:	86 95       	lsr	r24
    229a:	71 05       	cpc	r23, r1
    229c:	61 05       	cpc	r22, r1
    229e:	08 94       	sec
    22a0:	08 95       	ret

000022a2 <__fp_zero>:
    22a2:	e8 94       	clt

000022a4 <__fp_szero>:
    22a4:	bb 27       	eor	r27, r27
    22a6:	66 27       	eor	r22, r22
    22a8:	77 27       	eor	r23, r23
    22aa:	cb 01       	movw	r24, r22
    22ac:	97 f9       	bld	r25, 7
    22ae:	08 95       	ret

000022b0 <__mulsf3>:
    22b0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__mulsf3x>
    22b4:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__fp_round>
    22b8:	0e 94 10 11 	call	0x2220	; 0x2220 <__fp_pscA>
    22bc:	38 f0       	brcs	.+14     	; 0x22cc <__mulsf3+0x1c>
    22be:	0e 94 17 11 	call	0x222e	; 0x222e <__fp_pscB>
    22c2:	20 f0       	brcs	.+8      	; 0x22cc <__mulsf3+0x1c>
    22c4:	95 23       	and	r25, r21
    22c6:	11 f0       	breq	.+4      	; 0x22cc <__mulsf3+0x1c>
    22c8:	0c 94 07 11 	jmp	0x220e	; 0x220e <__fp_inf>
    22cc:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__fp_nan>
    22d0:	11 24       	eor	r1, r1
    22d2:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__fp_szero>

000022d6 <__mulsf3x>:
    22d6:	0e 94 2f 11 	call	0x225e	; 0x225e <__fp_split3>
    22da:	70 f3       	brcs	.-36     	; 0x22b8 <__mulsf3+0x8>

000022dc <__mulsf3_pse>:
    22dc:	95 9f       	mul	r25, r21
    22de:	c1 f3       	breq	.-16     	; 0x22d0 <__mulsf3+0x20>
    22e0:	95 0f       	add	r25, r21
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	55 1f       	adc	r21, r21
    22e6:	62 9f       	mul	r22, r18
    22e8:	f0 01       	movw	r30, r0
    22ea:	72 9f       	mul	r23, r18
    22ec:	bb 27       	eor	r27, r27
    22ee:	f0 0d       	add	r31, r0
    22f0:	b1 1d       	adc	r27, r1
    22f2:	63 9f       	mul	r22, r19
    22f4:	aa 27       	eor	r26, r26
    22f6:	f0 0d       	add	r31, r0
    22f8:	b1 1d       	adc	r27, r1
    22fa:	aa 1f       	adc	r26, r26
    22fc:	64 9f       	mul	r22, r20
    22fe:	66 27       	eor	r22, r22
    2300:	b0 0d       	add	r27, r0
    2302:	a1 1d       	adc	r26, r1
    2304:	66 1f       	adc	r22, r22
    2306:	82 9f       	mul	r24, r18
    2308:	22 27       	eor	r18, r18
    230a:	b0 0d       	add	r27, r0
    230c:	a1 1d       	adc	r26, r1
    230e:	62 1f       	adc	r22, r18
    2310:	73 9f       	mul	r23, r19
    2312:	b0 0d       	add	r27, r0
    2314:	a1 1d       	adc	r26, r1
    2316:	62 1f       	adc	r22, r18
    2318:	83 9f       	mul	r24, r19
    231a:	a0 0d       	add	r26, r0
    231c:	61 1d       	adc	r22, r1
    231e:	22 1f       	adc	r18, r18
    2320:	74 9f       	mul	r23, r20
    2322:	33 27       	eor	r19, r19
    2324:	a0 0d       	add	r26, r0
    2326:	61 1d       	adc	r22, r1
    2328:	23 1f       	adc	r18, r19
    232a:	84 9f       	mul	r24, r20
    232c:	60 0d       	add	r22, r0
    232e:	21 1d       	adc	r18, r1
    2330:	82 2f       	mov	r24, r18
    2332:	76 2f       	mov	r23, r22
    2334:	6a 2f       	mov	r22, r26
    2336:	11 24       	eor	r1, r1
    2338:	9f 57       	subi	r25, 0x7F	; 127
    233a:	50 40       	sbci	r21, 0x00	; 0
    233c:	9a f0       	brmi	.+38     	; 0x2364 <__mulsf3_pse+0x88>
    233e:	f1 f0       	breq	.+60     	; 0x237c <__mulsf3_pse+0xa0>
    2340:	88 23       	and	r24, r24
    2342:	4a f0       	brmi	.+18     	; 0x2356 <__mulsf3_pse+0x7a>
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	bb 1f       	adc	r27, r27
    234a:	66 1f       	adc	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	88 1f       	adc	r24, r24
    2350:	91 50       	subi	r25, 0x01	; 1
    2352:	50 40       	sbci	r21, 0x00	; 0
    2354:	a9 f7       	brne	.-22     	; 0x2340 <__mulsf3_pse+0x64>
    2356:	9e 3f       	cpi	r25, 0xFE	; 254
    2358:	51 05       	cpc	r21, r1
    235a:	80 f0       	brcs	.+32     	; 0x237c <__mulsf3_pse+0xa0>
    235c:	0c 94 07 11 	jmp	0x220e	; 0x220e <__fp_inf>
    2360:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__fp_szero>
    2364:	5f 3f       	cpi	r21, 0xFF	; 255
    2366:	e4 f3       	brlt	.-8      	; 0x2360 <__mulsf3_pse+0x84>
    2368:	98 3e       	cpi	r25, 0xE8	; 232
    236a:	d4 f3       	brlt	.-12     	; 0x2360 <__mulsf3_pse+0x84>
    236c:	86 95       	lsr	r24
    236e:	77 95       	ror	r23
    2370:	67 95       	ror	r22
    2372:	b7 95       	ror	r27
    2374:	f7 95       	ror	r31
    2376:	e7 95       	ror	r30
    2378:	9f 5f       	subi	r25, 0xFF	; 255
    237a:	c1 f7       	brne	.-16     	; 0x236c <__mulsf3_pse+0x90>
    237c:	fe 2b       	or	r31, r30
    237e:	88 0f       	add	r24, r24
    2380:	91 1d       	adc	r25, r1
    2382:	96 95       	lsr	r25
    2384:	87 95       	ror	r24
    2386:	97 f9       	bld	r25, 7
    2388:	08 95       	ret

0000238a <malloc>:
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	82 30       	cpi	r24, 0x02	; 2
    2394:	91 05       	cpc	r25, r1
    2396:	10 f4       	brcc	.+4      	; 0x239c <malloc+0x12>
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <__flp>
    23a0:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <__flp+0x1>
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	a0 e0       	ldi	r26, 0x00	; 0
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	30 97       	sbiw	r30, 0x00	; 0
    23ae:	19 f1       	breq	.+70     	; 0x23f6 <malloc+0x6c>
    23b0:	40 81       	ld	r20, Z
    23b2:	51 81       	ldd	r21, Z+1	; 0x01
    23b4:	02 81       	ldd	r16, Z+2	; 0x02
    23b6:	13 81       	ldd	r17, Z+3	; 0x03
    23b8:	48 17       	cp	r20, r24
    23ba:	59 07       	cpc	r21, r25
    23bc:	c8 f0       	brcs	.+50     	; 0x23f0 <malloc+0x66>
    23be:	84 17       	cp	r24, r20
    23c0:	95 07       	cpc	r25, r21
    23c2:	69 f4       	brne	.+26     	; 0x23de <malloc+0x54>
    23c4:	10 97       	sbiw	r26, 0x00	; 0
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <malloc+0x4a>
    23c8:	12 96       	adiw	r26, 0x02	; 2
    23ca:	0c 93       	st	X, r16
    23cc:	12 97       	sbiw	r26, 0x02	; 2
    23ce:	13 96       	adiw	r26, 0x03	; 3
    23d0:	1c 93       	st	X, r17
    23d2:	27 c0       	rjmp	.+78     	; 0x2422 <malloc+0x98>
    23d4:	00 93 eb 01 	sts	0x01EB, r16	; 0x8001eb <__flp>
    23d8:	10 93 ec 01 	sts	0x01EC, r17	; 0x8001ec <__flp+0x1>
    23dc:	22 c0       	rjmp	.+68     	; 0x2422 <malloc+0x98>
    23de:	21 15       	cp	r18, r1
    23e0:	31 05       	cpc	r19, r1
    23e2:	19 f0       	breq	.+6      	; 0x23ea <malloc+0x60>
    23e4:	42 17       	cp	r20, r18
    23e6:	53 07       	cpc	r21, r19
    23e8:	18 f4       	brcc	.+6      	; 0x23f0 <malloc+0x66>
    23ea:	9a 01       	movw	r18, r20
    23ec:	bd 01       	movw	r22, r26
    23ee:	ef 01       	movw	r28, r30
    23f0:	df 01       	movw	r26, r30
    23f2:	f8 01       	movw	r30, r16
    23f4:	db cf       	rjmp	.-74     	; 0x23ac <malloc+0x22>
    23f6:	21 15       	cp	r18, r1
    23f8:	31 05       	cpc	r19, r1
    23fa:	f9 f0       	breq	.+62     	; 0x243a <malloc+0xb0>
    23fc:	28 1b       	sub	r18, r24
    23fe:	39 0b       	sbc	r19, r25
    2400:	24 30       	cpi	r18, 0x04	; 4
    2402:	31 05       	cpc	r19, r1
    2404:	80 f4       	brcc	.+32     	; 0x2426 <malloc+0x9c>
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	61 15       	cp	r22, r1
    240c:	71 05       	cpc	r23, r1
    240e:	21 f0       	breq	.+8      	; 0x2418 <malloc+0x8e>
    2410:	fb 01       	movw	r30, r22
    2412:	93 83       	std	Z+3, r25	; 0x03
    2414:	82 83       	std	Z+2, r24	; 0x02
    2416:	04 c0       	rjmp	.+8      	; 0x2420 <malloc+0x96>
    2418:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <__flp+0x1>
    241c:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <__flp>
    2420:	fe 01       	movw	r30, r28
    2422:	32 96       	adiw	r30, 0x02	; 2
    2424:	44 c0       	rjmp	.+136    	; 0x24ae <malloc+0x124>
    2426:	fe 01       	movw	r30, r28
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	81 93       	st	Z+, r24
    242e:	91 93       	st	Z+, r25
    2430:	22 50       	subi	r18, 0x02	; 2
    2432:	31 09       	sbc	r19, r1
    2434:	39 83       	std	Y+1, r19	; 0x01
    2436:	28 83       	st	Y, r18
    2438:	3a c0       	rjmp	.+116    	; 0x24ae <malloc+0x124>
    243a:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <__brkval>
    243e:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <__brkval+0x1>
    2442:	23 2b       	or	r18, r19
    2444:	41 f4       	brne	.+16     	; 0x2456 <malloc+0xcc>
    2446:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    244a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    244e:	30 93 ea 01 	sts	0x01EA, r19	; 0x8001ea <__brkval+0x1>
    2452:	20 93 e9 01 	sts	0x01E9, r18	; 0x8001e9 <__brkval>
    2456:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    245a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    245e:	21 15       	cp	r18, r1
    2460:	31 05       	cpc	r19, r1
    2462:	41 f4       	brne	.+16     	; 0x2474 <malloc+0xea>
    2464:	2d b7       	in	r18, 0x3d	; 61
    2466:	3e b7       	in	r19, 0x3e	; 62
    2468:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    246c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2470:	24 1b       	sub	r18, r20
    2472:	35 0b       	sbc	r19, r21
    2474:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <__brkval>
    2478:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <__brkval+0x1>
    247c:	e2 17       	cp	r30, r18
    247e:	f3 07       	cpc	r31, r19
    2480:	a0 f4       	brcc	.+40     	; 0x24aa <malloc+0x120>
    2482:	2e 1b       	sub	r18, r30
    2484:	3f 0b       	sbc	r19, r31
    2486:	28 17       	cp	r18, r24
    2488:	39 07       	cpc	r19, r25
    248a:	78 f0       	brcs	.+30     	; 0x24aa <malloc+0x120>
    248c:	ac 01       	movw	r20, r24
    248e:	4e 5f       	subi	r20, 0xFE	; 254
    2490:	5f 4f       	sbci	r21, 0xFF	; 255
    2492:	24 17       	cp	r18, r20
    2494:	35 07       	cpc	r19, r21
    2496:	48 f0       	brcs	.+18     	; 0x24aa <malloc+0x120>
    2498:	4e 0f       	add	r20, r30
    249a:	5f 1f       	adc	r21, r31
    249c:	50 93 ea 01 	sts	0x01EA, r21	; 0x8001ea <__brkval+0x1>
    24a0:	40 93 e9 01 	sts	0x01E9, r20	; 0x8001e9 <__brkval>
    24a4:	81 93       	st	Z+, r24
    24a6:	91 93       	st	Z+, r25
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <malloc+0x124>
    24aa:	e0 e0       	ldi	r30, 0x00	; 0
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	cf 01       	movw	r24, r30
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <free>:
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <free+0xa>
    24c2:	81 c0       	rjmp	.+258    	; 0x25c6 <free+0x10c>
    24c4:	fc 01       	movw	r30, r24
    24c6:	32 97       	sbiw	r30, 0x02	; 2
    24c8:	13 82       	std	Z+3, r1	; 0x03
    24ca:	12 82       	std	Z+2, r1	; 0x02
    24cc:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <__flp>
    24d0:	b0 91 ec 01 	lds	r27, 0x01EC	; 0x8001ec <__flp+0x1>
    24d4:	10 97       	sbiw	r26, 0x00	; 0
    24d6:	81 f4       	brne	.+32     	; 0x24f8 <free+0x3e>
    24d8:	20 81       	ld	r18, Z
    24da:	31 81       	ldd	r19, Z+1	; 0x01
    24dc:	82 0f       	add	r24, r18
    24de:	93 1f       	adc	r25, r19
    24e0:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <__brkval>
    24e4:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <__brkval+0x1>
    24e8:	28 17       	cp	r18, r24
    24ea:	39 07       	cpc	r19, r25
    24ec:	51 f5       	brne	.+84     	; 0x2542 <free+0x88>
    24ee:	f0 93 ea 01 	sts	0x01EA, r31	; 0x8001ea <__brkval+0x1>
    24f2:	e0 93 e9 01 	sts	0x01E9, r30	; 0x8001e9 <__brkval>
    24f6:	67 c0       	rjmp	.+206    	; 0x25c6 <free+0x10c>
    24f8:	ed 01       	movw	r28, r26
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	ce 17       	cp	r28, r30
    2500:	df 07       	cpc	r29, r31
    2502:	40 f4       	brcc	.+16     	; 0x2514 <free+0x5a>
    2504:	4a 81       	ldd	r20, Y+2	; 0x02
    2506:	5b 81       	ldd	r21, Y+3	; 0x03
    2508:	9e 01       	movw	r18, r28
    250a:	41 15       	cp	r20, r1
    250c:	51 05       	cpc	r21, r1
    250e:	f1 f0       	breq	.+60     	; 0x254c <free+0x92>
    2510:	ea 01       	movw	r28, r20
    2512:	f5 cf       	rjmp	.-22     	; 0x24fe <free+0x44>
    2514:	d3 83       	std	Z+3, r29	; 0x03
    2516:	c2 83       	std	Z+2, r28	; 0x02
    2518:	40 81       	ld	r20, Z
    251a:	51 81       	ldd	r21, Z+1	; 0x01
    251c:	84 0f       	add	r24, r20
    251e:	95 1f       	adc	r25, r21
    2520:	c8 17       	cp	r28, r24
    2522:	d9 07       	cpc	r29, r25
    2524:	59 f4       	brne	.+22     	; 0x253c <free+0x82>
    2526:	88 81       	ld	r24, Y
    2528:	99 81       	ldd	r25, Y+1	; 0x01
    252a:	84 0f       	add	r24, r20
    252c:	95 1f       	adc	r25, r21
    252e:	02 96       	adiw	r24, 0x02	; 2
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	9b 81       	ldd	r25, Y+3	; 0x03
    2538:	93 83       	std	Z+3, r25	; 0x03
    253a:	82 83       	std	Z+2, r24	; 0x02
    253c:	21 15       	cp	r18, r1
    253e:	31 05       	cpc	r19, r1
    2540:	29 f4       	brne	.+10     	; 0x254c <free+0x92>
    2542:	f0 93 ec 01 	sts	0x01EC, r31	; 0x8001ec <__flp+0x1>
    2546:	e0 93 eb 01 	sts	0x01EB, r30	; 0x8001eb <__flp>
    254a:	3d c0       	rjmp	.+122    	; 0x25c6 <free+0x10c>
    254c:	e9 01       	movw	r28, r18
    254e:	fb 83       	std	Y+3, r31	; 0x03
    2550:	ea 83       	std	Y+2, r30	; 0x02
    2552:	49 91       	ld	r20, Y+
    2554:	59 91       	ld	r21, Y+
    2556:	c4 0f       	add	r28, r20
    2558:	d5 1f       	adc	r29, r21
    255a:	ec 17       	cp	r30, r28
    255c:	fd 07       	cpc	r31, r29
    255e:	61 f4       	brne	.+24     	; 0x2578 <free+0xbe>
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	84 0f       	add	r24, r20
    2566:	95 1f       	adc	r25, r21
    2568:	02 96       	adiw	r24, 0x02	; 2
    256a:	e9 01       	movw	r28, r18
    256c:	99 83       	std	Y+1, r25	; 0x01
    256e:	88 83       	st	Y, r24
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	9b 83       	std	Y+3, r25	; 0x03
    2576:	8a 83       	std	Y+2, r24	; 0x02
    2578:	e0 e0       	ldi	r30, 0x00	; 0
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	12 96       	adiw	r26, 0x02	; 2
    257e:	8d 91       	ld	r24, X+
    2580:	9c 91       	ld	r25, X
    2582:	13 97       	sbiw	r26, 0x03	; 3
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	19 f0       	breq	.+6      	; 0x258e <free+0xd4>
    2588:	fd 01       	movw	r30, r26
    258a:	dc 01       	movw	r26, r24
    258c:	f7 cf       	rjmp	.-18     	; 0x257c <free+0xc2>
    258e:	8d 91       	ld	r24, X+
    2590:	9c 91       	ld	r25, X
    2592:	11 97       	sbiw	r26, 0x01	; 1
    2594:	9d 01       	movw	r18, r26
    2596:	2e 5f       	subi	r18, 0xFE	; 254
    2598:	3f 4f       	sbci	r19, 0xFF	; 255
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <__brkval>
    25a2:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <__brkval+0x1>
    25a6:	28 17       	cp	r18, r24
    25a8:	39 07       	cpc	r19, r25
    25aa:	69 f4       	brne	.+26     	; 0x25c6 <free+0x10c>
    25ac:	30 97       	sbiw	r30, 0x00	; 0
    25ae:	29 f4       	brne	.+10     	; 0x25ba <free+0x100>
    25b0:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__flp+0x1>
    25b4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <__flp>
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <free+0x104>
    25ba:	13 82       	std	Z+3, r1	; 0x03
    25bc:	12 82       	std	Z+2, r1	; 0x02
    25be:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <__brkval+0x1>
    25c2:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <__brkval>
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	08 95       	ret

000025cc <memcpy>:
    25cc:	fb 01       	movw	r30, r22
    25ce:	dc 01       	movw	r26, r24
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <memcpy+0xa>
    25d2:	01 90       	ld	r0, Z+
    25d4:	0d 92       	st	X+, r0
    25d6:	41 50       	subi	r20, 0x01	; 1
    25d8:	50 40       	sbci	r21, 0x00	; 0
    25da:	d8 f7       	brcc	.-10     	; 0x25d2 <memcpy+0x6>
    25dc:	08 95       	ret

000025de <__do_global_dtors>:
    25de:	10 e0       	ldi	r17, 0x00	; 0
    25e0:	ca e4       	ldi	r28, 0x4A	; 74
    25e2:	d0 e0       	ldi	r29, 0x00	; 0
    25e4:	04 c0       	rjmp	.+8      	; 0x25ee <__do_global_dtors+0x10>
    25e6:	fe 01       	movw	r30, r28
    25e8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__tablejump2__>
    25ec:	21 96       	adiw	r28, 0x01	; 1
    25ee:	c7 35       	cpi	r28, 0x57	; 87
    25f0:	d1 07       	cpc	r29, r17
    25f2:	c9 f7       	brne	.-14     	; 0x25e6 <__do_global_dtors+0x8>
    25f4:	f8 94       	cli

000025f6 <__stop_program>:
    25f6:	ff cf       	rjmp	.-2      	; 0x25f6 <__stop_program>
